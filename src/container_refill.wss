// Everything about the contain refill feature for the rewards system.
// This feature aims to refill random container in the world when Geralt kills
// monsters.
//
// A list of loot tables are available and their chance to be picked can be
// changed in the menus.

/**
 * This function does a random roll, if it succeeds it calls the function to
 * fill a random container
 */
latent function RER_tryRefillRandomContainer(master: CRandomEncounters) {
  NLOG("container refill called");

  var inGameConfigWrapper: CInGameConfigWrapper = theGame.GetInGameConfigWrapper();
  var containers: array<CGameplayEntity>;
  var number_of_containers: int;
  var only_empty_containers: bool;
  var container: W3Container;
  var has_added: bool;
  var radius: float;
  var i: int;

  radius = StringToFloat(
    inGameConfigWrapper.GetVarValue(
      'RERcontainerRefill',
      'RERcontainerRefillRadius'
    )
  );

  number_of_containers = StringToInt(
    inGameConfigWrapper.GetVarValue(
      'RERcontainerRefill',
      'RERcontainerRefillNumberOfContainers'
    )
  );

  only_empty_containers = inGameConfigWrapper.GetVarValue(
    'RERcontainerRefill',
    'RERcontainerRefillOnlyEmptyContainers'
  );

  var menu_chance_multiplier: float = StringToFloat(
    inGameConfigWrapper.GetVarValue(
      'RERcontainerRefill',
      'RERcontainerRefillChanceMultiplier'
    )
  );

  FindGameplayEntitiesInRange(
    containers,
    thePlayer,
    radius, // radius
    50 + number_of_containers * 10, // max number of entities
    , // tag
    ,
    , // target
    'W3Container'
  );

  for (i = 0; i < containers.Size(); i += 1) {
    if (number_of_containers <= 0) {
      break;
    }

    container = containers[i] as W3Container;

    if (container) {
      if (only_empty_containers && !container.IsEmpty()) {
        continue;
      }

      master.loot_manager.rollAndGiveItemsTo(
        container.GetInventory(),
        menu_chance_multiplier
      );

      number_of_containers -= 1;
    }
  }
}
