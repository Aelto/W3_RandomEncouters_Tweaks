state Talking in RER_BountyMasterManager {
  event OnEnterState(previous_state_name: name) {
    super.OnEnterState(previous_state_name);
    NLOG("RER_BountyMasterManager - Talking");
    this.Talking_main();
  }
  
  entry function Talking_main() {
    RER_tutorialTryShowBountyMaster();
    this.runConversation();
    parent.GotoState('Waiting');
  }
  
  latent function runConversation() {
    var npc_actor: CActor;
    var distance_from_player: float;
    var radius: float;
    var max_radius: float;
    var should_continue: bool;
    var shorten_conversation: bool;
    var grounded_position: Vector;
    npc_actor = (CActor)(parent.bounty_master_entity);
    max_radius = 10*10;
    radius = 3*3;
    distance_from_player = VecDistanceSquared(thePlayer.GetWorldPosition(), parent.bounty_master_entity.GetWorldPosition());
    while (distance_from_player>radius) {
      distance_from_player = VecDistanceSquared(thePlayer.GetWorldPosition(), parent.bounty_master_entity.GetWorldPosition());
      SleepOneFrame();
      if (distance_from_player>max_radius) {
        return ;
      }
      
    }
    
    if (false) {
      shorten_conversation = theGame.GetInGameConfigWrapper().GetVarValue('RERoptionalFeatures', 'RERshortenBountyMasterConversation');
      grounded_position = npc_actor.GetWorldPosition();
      FixZAxis(grounded_position);
      npc_actor.TeleportWithRotation(grounded_position, VecToRotation(thePlayer.GetWorldPosition()-grounded_position));
      if (parent.bounty_manager.master.storages.bounty.bounty_level==0) {
        should_continue = this.playDialogue((new RER_RandomDialogBuilder in thePlayer).start().dialog(new REROL_i_am_dont_seen_notice in thePlayer, true), , npc_actor);
        if (!should_continue) {
          return ;
        }
        
        should_continue = this.playDialogue((new RER_RandomDialogBuilder in thePlayer).start().dialog(new REROL_glad_you_know_who_i_am in thePlayer, true), , npc_actor);
        if (!should_continue) {
          return ;
        }
        
        should_continue = this.playDialogue((new RER_RandomDialogBuilder in thePlayer).start().dialog(new REROL_rings_a_bell in thePlayer, true), , npc_actor);
        if (!should_continue) {
          return ;
        }
        
        should_continue = this.playDialogue((new RER_RandomDialogBuilder in thePlayer).start().dialog(new REROL_mhm_2 in thePlayer, true), , npc_actor);
        if (!should_continue) {
          return ;
        }
        
      }
      else  {
        
        should_continue = this.playDialogue((new RER_RandomDialogBuilder in thePlayer).start().dialog(new REROL_greetings in thePlayer, true), , npc_actor);
        
        if (!should_continue) {
          return ;
        }
        
        
      }
      
      should_continue = this.playDialogue((new RER_RandomDialogBuilder in thePlayer).start().either(new REROL_what_surprise_new_monster_to_kill in thePlayer, true, 1).either(new REROL_lemme_guess_monster_needs_killing in thePlayer, true, 1), , npc_actor);
      if (!should_continue) {
        return ;
      }
        
      should_continue = this.playDialogue((new RER_RandomDialogBuilder in thePlayer).start().dialog(new REROL_i_see_the_wounds in thePlayer, true).dialog(new REROL_any_witnesses in thePlayer, true), , npc_actor);
      if (!should_continue) {
        return ;
      }
      
      should_continue = this.playDialogue((new RER_RandomDialogBuilder in thePlayer).start().dialog(new REROL_mhm_2 in thePlayer, true).then(0.2), , npc_actor);
      if (!should_continue) {
        return ;
      }
      
      if (!shorten_conversation && RandRange(10)>5) {
        should_continue = this.playDialogue((new RER_RandomDialogBuilder in thePlayer).start().dialog(new REROL_really_helpful_that in thePlayer, true), , npc_actor);
        if (!should_continue) {
          return ;
        }
        
      }
      
      should_continue = this.playDialogue((new RER_RandomDialogBuilder in thePlayer).start().either(new REROL_fine_show_me_where_monsters in thePlayer, true, 1).either(new REROL_fine_ill_see_what_i_can_do in thePlayer, true, 1), , npc_actor);
      if (!should_continue) {
        return ;
      }
      
      should_continue = this.playDialogue((new RER_RandomDialogBuilder in thePlayer).start().dialog(new REROL_farewell in thePlayer, true), , npc_actor);
      if (!should_continue) {
        return ;
      }
      
    }
    
    parent.GotoState('SeedSelection');
  }
  
  private function shouldCancelDialogue(squared_radius: float): bool {
    return VecDistanceSquared(thePlayer.GetWorldPosition(), parent.bounty_master_entity.GetWorldPosition())>squared_radius;
  }
  
  private latent function playDialogue(dialog_builder: RER_RandomDialogBuilder, optional npc: CActor, optional interlocutor: CActor): bool {
    if (this.shouldCancelDialogue(3*3)) {
      (new RER_RandomDialogBuilder in thePlayer).start().dialog(new REROL_farewell in thePlayer, true).play(NULL, false, (CActor)(parent.bounty_master_entity));
      return false;
    }
    
    dialog_builder.then(RandF()).play(npc, false, interlocutor);
    return true;
  }
  
}
}
