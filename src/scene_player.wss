

enum RER_CameraTargetType {
  // When you want the camera to target a node, the node can move.
  RER_CameraTargetType_NODE = 0,

  // When you want the camera to target a static position.
  RER_CameraTargetType_STATIC = 1,

  // When you want the camera to target a bone component, it can move.
  RER_CameraTargetType_BONE = 3
}

enum RER_CameraPositionType {
  // The position will be absolute positions.
  RER_CameraPositionType_ABSOLUTE = 0,

  // The position will be relative to the camera's current position.
  RER_CameraPositionType_RELATIVE = 1,
}

enum RER_CameraVelocityType {
  // Relative to the rotation of the camera.
  RER_CameraVelocityType_RELATIVE = 0,

  RER_CameraVelocityType_ABSOLUTE = 1,
  
  RER_CameraVelocityType_FORWARD = 2,
}

struct RER_CameraScene {
  // Where the camera is placed.
  var position_type: RER_CameraPositionType;
  var position: Vector;

  // Where the camera is looking.
  var look_at_target_type: RER_CameraTargetType;
  var look_at_target_node: CNode;
  var look_at_target_static: Vector;
  var look_at_target_bone: CAnimatedComponent;

  var duration: float;

  var velocity_type: RER_CameraVelocityType;
  var velocity: Vector;

  // 1 Means no blending at all, while 0 means so much blending it won't move at all.
  var position_blending_ratio: float;
  var rotation_blending_ratio: float;

  // var deactivation_duration: float;
  // default deactivation_duration = 1.5;

  // var activation_duration: float;
  // default activation_duration = 1.5;
}

class RER_StaticCamera extends CStaticCamera {
  public function setFov(value: float) {
    var component: CCameraComponent;
    component = this.GetComponentByClassName('CCameraComponent') as CCameraComponent;

    // TODO: causes an issue with EE
    // component.fov = value;
  }

  public function start() {
    this.Run();
  }

  public latent function playCameraScenes(scenes: array<RER_CameraScene>) {
    var i: int;
    var current_scene: RER_CameraScene;

    for (i = 0; i < scenes.Size(); i += 1) {
      current_scene = scenes[i];

      playCameraScene(current_scene);
    }
  }

  private function getRotation(scene: RER_CameraScene, current_position: Vector): EulerAngles {
    var current_rotation: EulerAngles;

    switch (scene.look_at_target_type) {
      // TODO:
      // case RER_CameraTargetType_BONE:
      //   this.LookAtBone(scene.look_at_target_bone, scene.duration, scene.blend_time);
      //   break;

      case RER_CameraTargetType_STATIC:
        current_rotation = VecToRotation(scene.look_at_target_static - current_position);
        break;

      case RER_CameraTargetType_NODE:
        current_rotation = VecToRotation(scene.look_at_target_node.GetWorldPosition() - current_position);
        break;
    }

    // Because the Pitch (Y axis) is inverted by default.
    current_rotation.Pitch *= -1;

    return current_rotation;
  }

  public latent function playCameraScene(scene: RER_CameraScene, optional destroy_after: bool) {
    var current_rotation: EulerAngles;
    var current_position: Vector;

    // Immersive camera crashes if there is camera blending when on horse
    // or in combat.
    if (theGame.GetInGameConfigWrapper().GetVarValue('RERoptionalFeatures', 'RERcameraScenesDisabledOnHorse')
    &&  thePlayer.IsUsingHorse() || thePlayer.IsInCombat()) {
      return;
    }

    // This option was added because immersive camera doesn't like the blending 
    // options, and the game would crash.
    if (!theGame.GetInGameConfigWrapper().GetVarValue('RERoptionalFeatures', 'RERcameraBlendingDisabled')) {
      this.deactivationDuration = 1.5;
      this.activationDuration = 1.5;
    }

    this.SetFov(theCamera.GetFov());

    if (scene.position_type == RER_CameraPositionType_RELATIVE) {
      this.TeleportWithRotation(thePlayer.GetWorldPosition() + scene.position, this.getRotation(scene, scene.position));
    }
    else {
      this.TeleportWithRotation(scene.position, this.getRotation(scene, scene.position));
    }

    this.Run();
    Sleep(this.activationDuration);

    // 1. We always start from the camera's position and its rotation
    // only if not relative, because relative position starts from (0, 0, 0).
    // if (scene.position_type != RER_CameraPositionType_RELATIVE) {
    current_position = theCamera.GetCameraPosition();
    // }

    current_rotation = theCamera.GetCameraRotation();

    // 2. Then we move the camera there and start running.
    this.TeleportWithRotation(current_position, current_rotation);

    // 3. We start looping to animate the camera toward the scene goals.
    this.blendToScene(scene, current_position, current_rotation);

    this.Stop();

    // if (destroy_after) {
      // Removed because it cancels the blending.
      // this.Destroy();
    // }
  }

  private latent function blendToScene(scene: RER_CameraScene, out current_position: Vector, out current_rotation: EulerAngles) {
    var goal_rotation: EulerAngles;
    var starting_time: float;
    var ending_time: float;
    var time_progress: float; // it's a %

    starting_time = theGame.GetEngineTimeAsSeconds();
    ending_time = starting_time + scene.duration;
    while (theGame.GetEngineTimeAsSeconds() < ending_time) {
      time_progress = MinF((theGame.GetEngineTimeAsSeconds() - starting_time) / scene.duration, 0.5);

      // 1 We do the position & rotation blendings.
      // 1.1 We do the position blending.
      if (scene.position_type == RER_CameraPositionType_RELATIVE) {
        current_position += (thePlayer.GetWorldPosition() + scene.position - current_position) * scene.position_blending_ratio * time_progress;
      }
      else {
        current_position += (scene.position - current_position) * scene.position_blending_ratio * time_progress;
      }

      // 1.2 We do the rotation blending.
      goal_rotation = this.getRotation(scene, current_position);
      current_rotation.Roll += AngleNormalize180(goal_rotation.Roll - current_rotation.Roll) * scene.rotation_blending_ratio * time_progress;
      current_rotation.Yaw += AngleNormalize180(goal_rotation.Yaw - current_rotation.Yaw) * scene.rotation_blending_ratio * time_progress;
      current_rotation.Pitch += AngleNormalize180(goal_rotation.Pitch - current_rotation.Pitch) * scene.rotation_blending_ratio * time_progress;

      // 2 We update the goal position using the velocity.
      if (scene.velocity_type == RER_CameraVelocityType_ABSOLUTE) {
        scene.position += scene.velocity; // todo: use delta
      } else if (scene.velocity_type == RER_CameraVelocityType_FORWARD) {
        scene.position += VecNormalize(RotForward(current_rotation)) * scene.velocity;
      }
      else if (scene.velocity_type == RER_CameraVelocityType_RELATIVE) {
        scene.position += VecFromHeading(theCamera.GetCameraHeading()) * scene.velocity;
      }

      // 3 We finally teleport the camera.
      this.TeleportWithRotation(current_position, current_rotation);
      
      SleepOneFrame();
    }
  }

}


latent function RER_getStaticCamera(): RER_StaticCamera {
  var template: CEntityTemplate;
  var camera: RER_StaticCamera;

  template = LoadResourceAsync("dlc\modtemplates\randomencounterreworkeddlc\data\rer_static_camera.w2ent", true) as CEntityTemplate;
  camera = theGame.CreateEntity( template, thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() ) as RER_StaticCamera;

  return camera;
}