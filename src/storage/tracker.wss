
class RER_TrackerStorage extends RER_BaseStorage {
  // where the index is the EncounterType enum
  var encounters_spawned: array<int>;

  // where the index is the EncounterType enum
  var encounters_killed: array<int>;

  // where the index is the EncounterType enum
  var encounters_recycled: array<int>;

  var encounters_cancelled: int;

  // where the index is the CreatureType enum
  var creatures_spawned: array<int>;

  public function init() {
    var i: int;

    if (this.encounters_spawned.Size() <= 0) {
      for (i = 0; i < EncounterType; i += 1) {
        this.encounters_spawned.PushBack(0);
      }
    }

    if (this.encounters_killed.Size() <= 0) {
      for (i = 0; i < EncounterType; i += 1) {
        this.encounters_killed.PushBack(0);
      }
    }

    if (this.encounters_recycled.Size() <= 0) {
      for (i = 0; i < EncounterType; i += 1) {
        this.encounters_recycled.PushBack(0);
      }
    }

    if (this.creatures_spawned.Size() <= 0) {
      for (i = 0; i < CreatureMAX; i += 1) {
        this.creatures_spawned.PushBack(0);
      }
    }
  }
}

function RER_emitEncounterSpawned(master: CRandomEncounters, encounter: EncounterType) {
  var storage: RER_TrackerStorage = master.storages.tracker;

  if (storage) {
    storage.encounters_spawned[encounter] += 1;
  }
}

function RER_emitEncounterKilled(master: CRandomEncounters, encounter: EncounterType) {
  var storage: RER_TrackerStorage = master.storages.tracker;

  if (storage) {
    storage.encounters_killed[encounter] += 1;
  }
}

function RER_emitEncounterRecycled(master: CRandomEncounters, encounter: EncounterType) {
  var storage: RER_TrackerStorage = master.storages.tracker;

  if (storage) {
    storage.encounters_recycled[encounter] += 1;
  }
}


function RER_emitEncounterCancelled(master: CRandomEncounters) {
  var storage: RER_TrackerStorage = master.storages.tracker;

  if (storage) {
    storage.encounters_cancelled += 1;
  }
}

function RER_emitCreatureSpawned(master: CRandomEncounters, type: CreatureType, count: int) {
  var storage: RER_TrackerStorage = master.storages.tracker;

  if (storage) {
    storage.creatures_spawned[type] += count;
  }
}
