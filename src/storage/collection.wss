
// a collection of all storage classes the mod uses
class RER_StorageCollection {
  var general: RER_GeneralStorage;
  var ecosystem: RER_EcosystemStorage;
  var bounty: RER_BountyStorage;
  var contract: RER_ContractStorage;
  var tracker: RER_TrackerStorage;
}

// an helper function to get the full storage collection
function RER_loadStorageCollection(master: CRandomEncounters) {
  if (!master.storages) {
    NLOG("RER_loadStorageCollection() - Instantiating new storage collection");
  
    master.storages = new RER_StorageCollection in master;
  }

  if (!master.storages.general) {
    NLOG("RER_loadStorageCollection() - Instantiating new RER_GeneralStorage");
    master.storages.general = new RER_GeneralStorage in master.storages;
  }

  if (!master.storages.ecosystem) {
    NLOG("RER_loadStorageCollection() - Instantiating new RER_EcosystemStorage");
    master.storages.ecosystem = new RER_EcosystemStorage in master.storages;
  }

  if (!master.storages.bounty) {
    NLOG("RER_loadStorageCollection() - Instantiating RER_BountyStorage");
    master.storages.bounty = new RER_BountyStorage in master.storages;
  }

  if (!master.storages.contract) {
    NLOG("RER_loadStorageCollection() - Instantiating new RER_ContractStorage");
    master.storages.contract = new RER_ContractStorage in master.storages;
  }

  if (!master.storages.tracker) {
    NLOG("RER_loadStorageCollection() - Instantiating new RER_TrackerStorage");
    master.storages.tracker = new RER_TrackerStorage in master.storages;
  }
}
