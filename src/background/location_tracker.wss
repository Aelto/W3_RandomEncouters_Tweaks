statemachine class RER_LocationTracker {
  private var suitable_locations: array<Vector>;

  public function init() {
    this.GotoState("Waiting");
  }

  public function addLocation(position: Vector) {
    this.suitable_locations.PushBack(position);
  }

  public function canAddLocation(target: Vector): bool {
    var result: RER_LocationTrackerResult = this.getSuitableLocationNearby(target, 25.0);

    return !result.success;
  }

  public function getSuitableLocationNearby(position: Vector, radius: float): RER_LocationTrackerResult {
    var squared_radius: float = radius*radius;

    for (var position: Vector in this.suitable_locations) {
      if (VecDistanceSquared2D(position, target) <= squared_radius) {
        return RER_LocationTrackerResult(true, position);
      }
    }

    return RER_LocationTrackerResult();
  }

  public function removeSuitableLocationAt(position: Vector): RER_LocationTrackerResult {
    this.suitable_locations.Remove(position);
  }
}
