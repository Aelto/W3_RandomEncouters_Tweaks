
function RER_getGroundPosition(out input_position: Vector, optional personal_space: float, optional radius: float): bool {
  var found_viable_position: bool;
  var collision_normal: Vector;
  var max_height_check: float;
  var output_position: Vector;
  var point_z: float;
  var attempts: int;

  attempts = 10;
  output_position = input_position;
  personal_space = MaxF(personal_space, 1.0);
  max_height_check = 30.0;

  if (radius == 0) {
    radius = 10.0;
  }

  do {
    attempts -= 1;

    // first search for ground based on navigation data.
    theGame
    .GetWorld()
    .NavigationComputeZ(
      output_position,
      output_position.Z - max_height_check,
      output_position.Z + max_height_check,
      point_z
    );

    output_position.Z = point_z;

    if (!theGame.GetWorld().NavigationFindSafeSpot(output_position, personal_space, radius, output_position)) {
      continue;
    }

    // then do a static trace to find the position on ground
    // ... okay i'm not sure anymore, is the static trace needed?
    // theGame
    // .GetWorld()
    // .StaticTrace(
    //   output_position + Vector(0,0,1.5),// + 5,// Vector(0,0,5),
    //   output_position - Vector(0,0,1.5),// - 5,//Vector(0,0,5),
    //   output_position,
    //   collision_normal
    // );

    // finally, return if the position is above water level
    if (output_position.Z < theGame.GetWorld().GetWaterLevel(output_position, true)) {
      continue;
    }

    found_viable_position = true;
    break;
  } while (attempts > 0);


  if (found_viable_position) {
    input_position = output_position;

    return true;
  }

  return false;
}

function FixZAxis(out pos : Vector) {
  var world : CWorld;
  var z : float;

  world = theGame.GetWorld();

  if (world.NavigationComputeZ(pos, pos.Z - 128, pos.Z + 128, z)) {
    pos.Z = z;
  }
  else if (world.PhysicsCorrectZ(pos, z)) {
    pos.Z = z;
  }
}

function getGroupPositions(initial_position: Vector, count: int, density: float): array<Vector> {
  var s, r, x, y: float;
  var pos_fin: Vector;
  var output_positions: array<Vector>;
  
  var i: int;
  var sign: int;

  //const values used in the loop
  pos_fin.Z = initial_position.Z;
  s = count / density; // maintain a constant density of `density` unit per m2
  r = SqrtF(s/Pi());

  for (i = 0; i < count; i += 1) {
    x = RandF() * r;        // add random value within range to X
    y = RandF() * (r - x);  // add random value to Y so that the point is within the disk

    if(RandRange(2)) {       // randomly select the sign for misplacement
      sign = 1;
    }
    else {
      sign = -1;
    }
      
    pos_fin.X = initial_position.X + sign * x;  //final X pos
    
    if(RandRange(2)) {        // randomly select the sign for misplacement
      sign = 1;
    }
    else {
      sign = -1;
    }
      
    pos_fin.Y = initial_position.Y + sign * y;  //final Y pos

    // return false means it could not find ground position
    // in this case, take the default position
    // if return true, then pos_fin is updated with the correct position
    if (!getGroundPosition(pos_fin)) {
      pos_fin = initial_position;
    }

    output_positions.PushBack(pos_fin);
  }

  return output_positions;
}

function RER_vectorToSeed(point: Vector): int {
  return point.X + point.Y;
}