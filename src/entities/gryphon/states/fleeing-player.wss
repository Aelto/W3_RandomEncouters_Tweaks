
// The gryphon is fleeing far from the player.
// The gryphon is hurt, he's bleeding and start flying far from the
// player at low speed. So the player can catch him with or without
// Roach. It ends when the gryphon is exhausted and goes on the ground
// SINGLE state. Used once in the encounter (more would be annoying)
state GryphonFleeingPlayer in RandomEncountersReworkedGryphonHuntEntity {
  var is_bleeding: bool;
  var bait: CEntity;
  var ai_behavior_flight: CAIFlightIdleFreeRoam;
  var ai_behavior_combat: CAIFlyingMonsterCombat;
  var flight_heading: float;
  var distance_threshold: float;
  var starting_position: Vector;
  
  // if found_landing_position is set to true,
  // The gryphon will go to the landing position
  var found_landing_position: bool;
  var landing_position: Vector;



  event OnEnterState(previous_state_name: name) {
    super.OnEnterState(previous_state_name);

    // the gryphon bleeds only if a fight happened before.
    if (previous_state_name == 'GryphonFightingPlayer') {
      this.is_bleeding = true;
    }
    else {
      this.is_bleeding = false;
    }

    LogChannel('modRandomEncounters', "Gryphon - State GryphonFleeingPlayer");

    this.GryphonFleeingPlayer_main();
  }


  entry function GryphonFleeingPlayer_main() {
    var i: int;

    LogChannel('modRandomEncounters', "Gryphon - State GryphonFleeingPlayer - main");

    (parent.this_actor).SetImmortalityMode(AIM_Invulnerable, AIC_Default);
    (parent.this_actor).EnableCharacterCollisions(false);
    (parent.this_actor).EnableDynamicCollisions(false);

    bait = theGame.CreateEntity(
      LoadResourceAsync("characters\npc_entities\animals\hare.w2ent", true) as CEntityTemplate,
      parent.this_entity.GetWorldPosition(),
      thePlayer.GetWorldRotation(),
      true,
      false,
      false,
      PM_DontPersist
    );

    for(i=0;i<100;i+=1) {
      parent.this_newnpc.CancelAIBehavior(i);
    }

    (this.bait as CNewNPC).SetGameplayVisibility(false);
    (this.bait as CNewNPC).SetVisibility(false);    
    (this.bait as CActor).EnableCharacterCollisions(false);
    (this.bait as CActor).EnableDynamicCollisions(false);
    (this.bait as CActor).EnableStaticCollisions(false);
    (this.bait as CActor).SetImmortalityMode(AIM_Immortal, AIC_Default);
    (this.bait as CActor).AddBuffImmunity_AllNegative('RandomEncountersReworked', false);

    parent.this_newnpc.SetUnstoppable(true);

    theSound.SoundEvent("stop_music");
    theSound.SoundEvent("mus_griffin_chase");

    // this.GryphonFleeingPlayer_startFlying();
    this.GryphonFleeingPlayer_forgetPlayer();

    parent.AddTimer('GryphonFleeingPlayer_startFlying', 2, false);
    parent.AddTimer('GryphonFleeingPlayer_forgetPlayer', 0.05, true);

    // in case something unexpected happened.
    // the timer is removed if the gryphon is waiting for the player
    // the gryphon will enter into the FlyingAbovePlayer state.
    // meaning il will come back to the player.
    parent.AddTimer('GryphonFleeingPlayer_GiveUp', 60, true);
  }

  timer function GryphonFleeingPlayer_forgetPlayer(optional dt : float, optional id : Int32) {
    parent.this_newnpc.ForgetActor(thePlayer);
  }

  timer function GryphonFleeingPlayer_startFlying(optional dt : float, optional id : Int32) {
    this.ai_behavior_flight = new CAIFlightIdleFreeRoam in this;

    this.flight_heading = VecHeading(
      parent.this_entity.GetWorldPosition() - thePlayer.GetWorldPosition()
    );

    parent.this_actor.SetTemporaryAttitudeGroup( 'friendly_to_player', AGP_Default );
    parent.this_newnpc.ForgetActor(thePlayer);
    parent.this_newnpc.NoticeActor(this.bait as CActor);

    this.distance_threshold = 150 * 150; // squared value for performances
    this.starting_position = thePlayer.GetWorldPosition();

    theSound.SoundEvent("stop_music");
    theSound.SoundEvent("play_music_nomansgrad");
    theSound.SoundEvent("mus_griffin_chase");

    parent.AddTimer('GryphonFleeingPlayer_intervalDefaultFunction', 2, true);

    if (this.is_bleeding) {
      parent.AddTimer('GryphonFleeingPlayer_intervalDropBloodFunction', 0.3, true);
    }
  }


  timer function GryphonFleeingPlayer_intervalDefaultFunction(optional dt : float, optional id : Int32) {
    var bait_position: Vector;

    LogChannel('modRandomEncounters', "gryphon fleeing");

    parent.this_actor.SetTemporaryAttitudeGroup( 'monsters', AGP_Default );

    bait_position = parent.this_entity.GetWorldPosition();
    bait_position += VecConeRand(this.flight_heading, 1, 100, 100);

    FixZAxis(bait_position);

    bait_position.Z += 50;

    this.bait.Teleport(bait_position);
    
    parent.this_newnpc.ForgetAllActors();
    parent.this_newnpc.NoticeActor(this.bait as CActor);

    parent.this_actor.SetHealthPerc(parent.this_actor.GetHealthPercents() + 0.01);

    // attempt at forcing the gryphon to fly
    parent.this_entity.Teleport(parent.this_entity.GetWorldPosition() + Vector(0, 0, 0.1));

    // distance_threshold is already squared
    if (VecDistanceSquared(this.starting_position, parent.this_actor.GetWorldPosition()) > distance_threshold) {
      LogChannel('modRandomEncounters', "Gryphon looking for ground position");

      parent.RemoveTimer('GryphonFleeingPlayer_intervalDefaultFunction');
      parent.AddTimer('GryphonFightingPlayer_intervalLookingForGroundPositionFunction', 1, true);

      // the gryphon is coming down, set back his collisions.
      (parent.this_actor).SetImmortalityMode(AIM_Invulnerable, AIC_Default);
      (parent.this_actor).EnableCharacterCollisions(true);
      (parent.this_actor).EnableDynamicCollisions(true);
      parent.this_newnpc.SetUnstoppable(false);

    }
  }

  timer function GryphonFightingPlayer_intervalLookingForGroundPositionFunction(optional dt: float, optional id: Int32) {
    var bait_position: Vector;

    bait_position = VecRingRand(1, 20) + parent.this_entity.GetWorldPosition();
    bait_position.Z -= 20;

    // the bait is close enough for the ground.
    // we look for a safe landing position
    if (!this.found_landing_position && (bait as CActor).GetDistanceFromGround(500) <= 20) {
      this.landing_position = bait_position;
      
      if (theGame.GetWorld().NavigationFindSafeSpot(this.landing_position, 2, 100, this.landing_position)
      // if (getGroundPosition(this.landing_position, 3.0)
      && theGame.GetWorld().GetWaterLevel(this.landing_position, true) <= this.landing_position.Z) {

        LogChannel('modRandomEncounters', "found landing position");
        this.found_landing_position = true;
        
        // so the bait is not completely into the ground
        this.landing_position.Z += 0.5;

        bait_position = this.landing_position;
      }
    }

    if (this.found_landing_position) {
      bait_position = this.landing_position;
    }

    this.bait.Teleport(bait_position);
    parent.this_actor.SetTemporaryAttitudeGroup( 'monsters', AGP_Default );
    parent.this_newnpc.ForgetActor(thePlayer);
    parent.this_newnpc.NoticeActor(this.bait as CActor);

    // attempt at making the gryphon land gracefully
    if (parent.this_actor.GetDistanceFromGround(500) > 5) {
      parent.this_entity.Teleport(parent.this_entity.GetWorldPosition() - Vector(0, 0, 0.05));
    }

    parent.this_actor.SetHealthPerc(parent.this_actor.GetHealthPercents() + 0.01);

    if (this.found_landing_position) {
      parent.killNearbyEntities(this.bait);
    }

    if (this.found_landing_position && parent.this_actor.GetDistanceFromGround(500) < 5) {
      (parent.this_actor).EnableCharacterCollisions(true);
      (parent.this_actor).EnableDynamicCollisions(true);
      (parent.this_actor).EnableStaticCollisions(true);
      parent.this_newnpc.SetUnstoppable(false);


      LogChannel('modRandomEncounters', "Gryphon landed");

      parent.RemoveTimer('GryphonFightingPlayer_intervalLookingForGroundPositionFunction');
      // the gryphon found a landing spot, giving up now would not make sense.
      parent.RemoveTimer('GryphonFleeingPlayer_GiveUp');

      this.cancelAIBehavior();

      this.ai_behavior_combat = new CAIFlyingMonsterCombat in this;
      parent.this_actor.ForceAIBehavior( this.ai_behavior_combat, BTAP_Emergency );
      
      parent.AddTimer('GryphonFleeingPlayer_intervalWaitPlayerFunction', 0.5, true);
    }
  }

  timer function GryphonFleeingPlayer_intervalWaitPlayerFunction(optional dt : float, optional id : Int32) {
    var gryphon_position: Vector;
		var mac 	: CMovingPhysicalAgentComponent;

    this.bait.Teleport(this.landing_position);

    parent.this_newnpc.ForgetActor(thePlayer);
    parent.this_newnpc.NoticeActor(this.bait as CActor);

    parent.this_newnpc.ChangeStance( NS_Normal );
    parent.this_newnpc.SetBehaviorVariable( '2high', 0 );
    parent.this_newnpc.SetBehaviorVariable( '2low', 0 );
    parent.this_newnpc.SetBehaviorVariable( '2ground', 1 );

    parent.this_newnpc.SetBehaviorVariable( 'DistanceFromGround', 0 );
		parent.this_newnpc.SetBehaviorVariable( 'GroundContact', 1.0 );		
		
		mac = parent.this_newnpc.GetMovingAgentComponent() as CMovingPhysicalAgentComponent;
		parent.this_newnpc.ChangeStance( NS_Wounded );
		mac.SetAnimatedMovement( false );
		parent.this_newnpc.EnablePhysicalMovement( false );
		mac.SnapToNavigableSpace( true );
    parent.this_newnpc.PlayEffect( 'hit_ground' );

    parent.this_actor.SetHealthPerc(parent.this_actor.GetHealthPercents() + 0.005);

    if (VecDistanceSquared(parent.this_actor.GetWorldPosition(), thePlayer.GetWorldPosition()) < 625) {
      parent.GotoState('GryphonFightingPlayer');
    }
  }

  function cancelAIBehavior() {
    var i: int;
    
    for(i=0;i<100;i+=1)
    {
      parent.this_newnpc.CancelAIBehavior(i);
    }
  }

  timer function GryphonFleeingPlayer_intervalDropBloodFunction(optional dt : float, optional id: Int32) {
    var position: Vector;

    position = parent.this_actor.GetWorldPosition();

    FixZAxis(position);
    parent.blood_maker.addTrackHere(position);
  }

  timer function GryphonFleeingPlayer_GiveUp(optional dt : float, optional id: Int32) {
    parent.GotoState('FlyingAbovePlayer');
  }

  event OnLeaveState( nextStateName : name ) {
    this.bait.Destroy();
    parent.RemoveTimer('GryphonFleeingPlayer_intervalDefaultFunction');
    parent.RemoveTimer('GryphonFleeingPlayer_intervalWaitPlayerFunction');
    parent.RemoveTimer('GryphonFleeingPlayer_intervalDropBloodFunction');
    parent.RemoveTimer('GryphonFleeingPlayer_forgetPlayer');
    parent.RemoveTimer('GryphonFleeingPlayer_GiveUp');

    (parent.this_actor).SetImmortalityMode(AIM_None, AIC_Default);
    (parent.this_actor).EnableCharacterCollisions(true);
    (parent.this_actor).EnableDynamicCollisions(true);
    (parent.this_actor).EnableStaticCollisions(true);

    parent.this_newnpc.SetUnstoppable(false);


    super.OnLeaveState(nextStateName);
  }
}
