
class RER_TrackerGlossary extends SU_GlossaryEntry {
  default entry_unique_id = 'RER_TrackerGlossary';
  
  function getDescription(): string {
    var tracker: RER_TrackerStorage = RER_getTrackerStorage();

    if (!tracker) {
      NLOG("RER_addTrackerGlossary - no tracker storage found");

      return "ERROR: failed to retrieve RER Tracker Storage";
    }

    var message: string = "";
    var total_encounters_spawned: int = 0;
    for count: int in tracker.encounters_spawned {
      total_encounters_spawned += count;
    }

    message += "Encounters spawned: " + total_encounters_spawned;
    message += "<br/> - " + tracker.encounters_spawned[EncounterType_DEFAULT] + " Ambushes";
    message += "<br/> - " + tracker.encounters_spawned[EncounterType_HUNT] + " Monster hunts";
    message += "<br/> - " + tracker.encounters_spawned[EncounterType_HUNTINGGROUND] + " Hunting grounds";
    message += "<br/>";
    message += "<br/>";

    var total_encounters_killed: int = 0;
    for count: int in tracker.encounters_killed {
      total_encounters_killed += count;
    }

    message += "Encounters killed: " + total_encounters_killed;
    message += "<br/> - " + tracker.encounters_killed[EncounterType_DEFAULT] + " Ambushes";
    message += "<br/> - " + tracker.encounters_killed[EncounterType_HUNT] + " Monster hunts";
    message += "<br/> - " + tracker.encounters_killed[EncounterType_HUNTINGGROUND] + " Hunting grounds";
    message += "<br/>";
    message += "<br/>";

    var total_encounters_recycled: int = 0;
    for count: int in tracker.encounters_recycled {
      total_encounters_recycled += count;
    }

    message += "Encounters missed: " + total_encounters_recycled;
    message += "<br/> - " + tracker.encounters_recycled[EncounterType_DEFAULT] + " Ambushes";
    message += "<br/> - " + tracker.encounters_recycled[EncounterType_HUNT] + " Monster hunts";
    message += "<br/> - " + tracker.encounters_recycled[EncounterType_HUNTINGGROUND] + " Hunting grounds";
    message += "<br/>";
    message += "<br/>";

    var total_creatures_spawned: int = 0;
    for count: int in tracker.creatures_spawned {
      total_creatures_spawned += count;
    }

    message += "Creatures spawned: " + total_creatures_spawned;
    var master: CRandomEncounters;

    if (!getRandomEncounters(master)) {
      return message;
    }

    var i: int;
    for (i = 0; i < CreatureMAX; i += 1) {
      if (tracker.creatures_spawned[i] <= 0) {
        continue;
      }

      message += "<br/> - " + tracker.creatures_spawned[i] + " " + getCreatureNameFromCreatureType(master.bestiary, i);
    }

    return message;
  }
}

function RER_addTrackerGlossary() {
  var book: RER_TrackerGlossary;

  book = new RER_TrackerGlossary in thePlayer;

  book.drop_down_label = "Random Encounters Reworked";
  book.drop_down_tag = 'RandomEncountersReworked';
  
  book.title = "Tracking data";

  SU_addGlossaryEntry(book);
}