
struct SEnemyTemplate {
  var template : string;
  var max      : int;
  var count    : int;
  var bestiary_entry: string;
}

function makeEnemyTemplate(template: string, optional max: int, optional count: int, optional bestiary_entry: string): SEnemyTemplate {
  var enemy_template: SEnemyTemplate;

  enemy_template.template = template;
  enemy_template.max = max;
  enemy_template.count = count;
  enemy_template.bestiary_entry = bestiary_entry;

  return enemy_template;
}
 
struct DifficultyFactor {
  var minimum_count_easy: int;
  var maximum_count_easy: int;
  
  var minimum_count_medium: int;
  var maximum_count_medium: int;
  
  var minimum_count_hard: int;
  var maximum_count_hard: int;
}

struct EnemyTemplateList {
  var templates: array<SEnemyTemplate>;
  var difficulty_factor: DifficultyFactor;
}

function mergeEnemyTemplateLists(a, b: EnemyTemplateList): EnemyTemplateList {
  var output: EnemyTemplateList;
  var i: int;

  output.difficulty_factor.minimum_count_easy
    = a.difficulty_factor.minimum_count_easy
    + b.difficulty_factor.minimum_count_easy;

  output.difficulty_factor.maximum_count_easy
    = a.difficulty_factor.maximum_count_easy
    + b.difficulty_factor.maximum_count_easy;
  
  output.difficulty_factor.minimum_count_medium
    = a.difficulty_factor.minimum_count_medium
    + b.difficulty_factor.minimum_count_medium;
  
  output.difficulty_factor.maximum_count_medium 
    = a.difficulty_factor.maximum_count_medium
    + b.difficulty_factor.maximum_count_medium;
  
  output.difficulty_factor.minimum_count_hard
    = a.difficulty_factor.minimum_count_hard
    + b.difficulty_factor.minimum_count_hard;

  output.difficulty_factor.maximum_count_hard
    = a.difficulty_factor.maximum_count_hard
    + b.difficulty_factor.maximum_count_hard;

  for (i = 0; i < a.templates.Size(); i += 1) {
    output.templates.PushBack(a.templates[i]);
  }

  for (i = 0; i < b.templates.Size(); i += 1) {
    output.templates.PushBack(b.templates[i]);
  }

  return output;
}

function getMaximumCountBasedOnDifficulty(out factor: DifficultyFactor, difficulty: RER_Difficulty, optional added_factor: float): int {
  if (added_factor == 0) {
    added_factor = 1;
  }

  if (difficulty >= 2) {
    return FloorF(factor.maximum_count_hard * added_factor);
  }

  if (difficulty >= 1) {
    return FloorF(factor.maximum_count_medium * added_factor);
  }

  return FloorF(factor.maximum_count_easy * added_factor);
}

function getMinimumCountBasedOnDifficulty(out factor: DifficultyFactor, difficulty: RER_Difficulty, optional added_factor: float): int {
  if (added_factor == 0) {
    added_factor = 1;
  }

  if (difficulty >= 2) {
    return FloorF(factor.minimum_count_hard * added_factor);
  }

  if (difficulty >= 1) {
    return FloorF(factor.minimum_count_medium * added_factor);
  }

  return FloorF(factor.minimum_count_easy * added_factor);
}

function rollDifficultyFactor(out factor: DifficultyFactor, difficulty: RER_Difficulty, optional added_factor: float): int {
  if (added_factor == 0) {
    added_factor = 1;
  }

  // https://github.com/Aelto/W3_RandomEncounters_Tweaks/issues/34
  // if the selected difficulty is RANDOM, then we randomly pick the difficulty
  if (difficulty == RER_Difficulty_RANDOM) {
    difficulty = RandRange(RER_Difficulty_RANDOM - 1);
  }
  
  return RandRange(
    getMinimumCountBasedOnDifficulty(factor, difficulty, added_factor),
    getMaximumCountBasedOnDifficulty(factor, difficulty, added_factor) + 1  // +1 because RandRange is [min;max[
  );
}

function rollDifficultyFactorWithRng(out factor: DifficultyFactor, difficulty: RER_Difficulty, optional added_factor: float, rng: RandomNumberGenerator): int {
  if (added_factor == 0) {
    added_factor = 1;
  }

  // https://github.com/Aelto/W3_RandomEncounters_Tweaks/issues/34
  // if the selected difficulty is RANDOM, then we randomly pick the difficulty
  if (difficulty == RER_Difficulty_RANDOM) {
    difficulty = RandRange(RER_Difficulty_RANDOM - 1);
  }
  
  return (rng.nextRange(
    getMinimumCountBasedOnDifficulty(factor, difficulty, added_factor),
    // +1 because RandRange is [min;max[
    getMaximumCountBasedOnDifficulty(factor, difficulty, added_factor) + 1
  )) as int;
}

// return true if atleast of the bestiary entries is known.
// if all entries are unknown then return false
latent function bestiaryCanSpawnEnemyTemplateList(template_list: EnemyTemplateList, manager: CWitcherJournalManager): bool {
  // we use a list too avoid loading twice the same journal entry
  var already_checked_journals: array<string>;
  var can_spawn: bool;
	
  var i, j: int;

  var resource : CJournalResource;
	var entryBase : CJournalBase;

  for (i = 0; i < template_list.templates.Size(); i += 1) {
    // 1. first checking if the entry was already checked
    for (j = 0; j < already_checked_journals.Size(); j += 1) {
      // 2. the entry was checked already, we skip it
      if (already_checked_journals[j] == template_list.templates[i].bestiary_entry) {
        continue;
      }
    }

    // 3. check the entry
    can_spawn = bestiaryCanSpawnEnemyTemplate(template_list.templates[i], manager);
    if (can_spawn) {
      return true;
    }

    // 4. entry unknown, add it to the checked list
    already_checked_journals.PushBack(template_list.templates[i].bestiary_entry);
  }

  return false;
}

latent function bestiaryCanSpawnEnemyTemplate(enemy_template: SEnemyTemplate, manager: CWitcherJournalManager): bool {
  var resource : CJournalResource;
	var entryBase : CJournalBase;

  if (enemy_template.bestiary_entry == "") {
    NLOG("bestiary entry has no value, returning true");

    return true;
  }

  resource = LoadResourceAsync(
    enemy_template.bestiary_entry, true
  ) as CJournalResource;

  if (resource) {
    entryBase = resource.GetEntry();

    if (entryBase) {
      if (manager.GetEntryHasAdvancedInfo(entryBase)) {
        // NLOG("bestiary can spawn enemy: " + enemy_template.bestiary_entry + " TRUE");


        return true;
      }
    }
    else {
      // NLOG("unknown bestiary entryBase for entry " + enemy_template.bestiary_entry);
    }
  }
  else {
    // NLOG("unknown bestiary resource: " + enemy_template.bestiary_entry);
  }

  // NLOG("bestiary can spawn enemy: " + enemy_template.bestiary_entry + " FALSE");

  return false;
}

