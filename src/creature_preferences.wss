
enum RER_Biome {
  BiomeForest = 0,
  BiomeSwamp = 1,
  BiomeWater = 2
}

enum RER_RegionConstraint {
  RER_RegionConstraint_NONE = 0,
  RER_RegionConstraint_ONLY_WHITEORCHARD = 1,
  RER_RegionConstraint_ONLY_VELEN = 2,
  RER_RegionConstraint_ONLY_SKELLIGE = 3,
  RER_RegionConstraint_ONLY_TOUSSAINT = 4,
  RER_RegionConstraint_NO_WHITEORCHARD = 5,
  RER_RegionConstraint_NO_VELEN = 6,
  RER_RegionConstraint_NO_SKELLIGE = 7,
  RER_RegionConstraint_NO_TOUSSAINT = 8
}

class RER_CreaturePreferences {

  public function reset(): RER_CreaturePreferences {
    this.only_biomes.Clear();
    this.disliked_biomes.Clear();
    this.liked_biomes.Clear();

    return this;
  }

  public var creature_type: CreatureType;
  public function setCreatureType(type: CreatureType): RER_CreaturePreferences {
    this.creature_type = type;

    return this;
  }

  // If the creature can only spawn in a biome
  public var only_biomes: array<RER_Biome>;
  public function addOnlyBiome(biome: RER_Biome): RER_CreaturePreferences {
    this.only_biomes.PushBack(biome);

    return this;
  }

  // If the creature has its chance reduce by the external factor
  // when in the biomes.
  public var disliked_biomes: array<RER_Biome>;
  public function addDislikedBiome(biome: RER_Biome): RER_CreaturePreferences {
    this.disliked_biomes.PushBack(biome);

    return this;
  }

  // If the creature has its chance increased by the external factor
  // when in the biomes.
  public var liked_biomes: array<RER_Biome>;
  public function addLikedBiome(biome: RER_Biome): RER_CreaturePreferences {
    this.liked_biomes.PushBack(biome);

    return this;
  }

  public var chance_day: int;
  public var chance_night: int;
  public function setChances(day, night: int): RER_CreaturePreferences {
    this.chance_day = day;
    this.chance_night = night;

    return this;
  }

  // #region persistent values value is not reset
  public var is_night: bool;
  public function setIsNight(value: bool): RER_CreaturePreferences {
    this.is_night = value;

    return this;
  }

  public var city_spawn_allowed: bool;
  public function setCitySpawnAllowed(value: bool): RER_CreaturePreferences {
    this.city_spawn_allowed = value;

    return this;
  }

  public var region_constraint: RER_RegionConstraint;
  default region_constraint = RER_RegionConstraint_NONE;
  public function setRegionConstraint(constraint: RER_RegionConstraint): RER_CreaturePreferences {
    this.region_constraint = constraint;

    return this;
  }

  // Value is not reset.
  public var external_factors_coefficient: float;
  public function setExternalFactorsCoefficient(value: float): RER_CreaturePreferences {
    this.external_factors_coefficient = value;
    
    return this;
  }

  // Value is not reset.
  public var is_near_water: bool;
  public function setIsNearWater(value: bool): RER_CreaturePreferences {
    this.is_near_water = value;

    return this;
  }

  // Value is not reset.
  public var is_in_forest: bool;
  public function setIsInForest(value: bool): RER_CreaturePreferences {
    this.is_in_forest = value;

    return this;
  }

  // Value is not reset.
  public var is_in_swamp: bool;
  public function setIsInSwamp(value: bool): RER_CreaturePreferences {
    this.is_in_swamp = value;

    return this;
  }

  public var current_region: string;
  public function setCurrentRegion(region: string): RER_CreaturePreferences {
    this.current_region = region;

    return this;
  }

  public var is_in_city: bool;
  public function setIsInCity(city: bool): RER_CreaturePreferences {
    this.is_in_city = city;

    return this;
  }
  // #endregion persistent values

  public function getChances(): int {
    var i: int;
    var can_spawn: bool;
    var spawn_chances: int;
    var is_in_disliked_biome: bool;
    var is_in_liked_biome: bool;

    if (this.is_in_city && !this.city_spawn_allowed) {
      return 0;
    }

    can_spawn = true;

    if (this.region_constraint == RER_RegionConstraint_NO_VELEN && (this.current_region == "no_mans_land" || this.current_region == "novigrad")
    ||  this.region_constraint == RER_RegionConstraint_NO_SKELLIGE && (this.current_region == "skellige" || this.current_region == "kaer_morhen")
    ||  this.region_constraint == RER_RegionConstraint_NO_TOUSSAINT && this.current_region == "bob"
    ||  this.region_constraint == RER_RegionConstraint_NO_WHITEORCHARD && this.current_region == "prolog_village"
    ||  this.region_constraint == RER_RegionConstraint_ONLY_TOUSSAINT && this.current_region != "bob"
    ||  this.region_constraint == RER_RegionConstraint_ONLY_WHITEORCHARD && this.current_region != "prolog_village"
    ||  this.region_constraint == RER_RegionConstraint_ONLY_SKELLIGE && this.current_region != "skellige" && this.current_region != "kaer_morhen"
    ||  this.region_constraint == RER_RegionConstraint_ONLY_VELEN && this.current_region != "no_mans_land" && this.current_region != "novigrad") {
      // NLOG("creature removed from region constraints, at " + this.region_constraint + " and current region = " + this.current_region + " for " + this.creature_type);

      can_spawn = false;
    }

    if (!can_spawn) {
      return 0;
    }

    can_spawn = false;

    for (i = 0; i < this.only_biomes.Size(); i += 1) {
      if (this.only_biomes[i] == BiomeSwamp && this.is_in_swamp) {
        can_spawn = true;
      }

      if (this.only_biomes[i] == BiomeForest && this.is_in_forest) {
        can_spawn = true;
      }

      if (this.only_biomes[i] == BiomeWater && this.is_near_water) {
        can_spawn = true;
      }
    }

    // No allowed biome, return 0 directly.
    if (this.only_biomes.Size() > 0 && !can_spawn) {
      NLOG("creature removed from only biome, for " + this.creature_type);

      return 0;
    }

    if (this.is_night) {
      spawn_chances = this.chance_night;
    }
    else {
      spawn_chances = this.chance_day;
    }

    
    // Being in a disliked biome reduces the spawn chances.
    is_in_disliked_biome = false;
    for (i = 0; i < this.disliked_biomes.Size(); i += 1) {
      if (this.disliked_biomes[i] == BiomeSwamp && this.is_in_swamp) {
        is_in_disliked_biome = true;
      }

      if (this.disliked_biomes[i] == BiomeForest && this.is_in_forest) {
        is_in_disliked_biome = true;
      }

      if (this.disliked_biomes[i] == BiomeWater && this.is_near_water) {
        is_in_disliked_biome = true;
      }
    }

    if (is_in_disliked_biome) {
      spawn_chances = this.applyCoefficientToCreatureDivide(spawn_chances);
    }

    // Being in a liked biome increases the spawn chances.
    is_in_liked_biome = false;
    for (i = 0; i < this.liked_biomes.Size(); i += 1) {
      if (this.liked_biomes[i] == BiomeSwamp && this.is_in_swamp) {
        is_in_liked_biome = true;
      }

      if (this.liked_biomes[i] == BiomeForest && this.is_in_forest) {
        is_in_liked_biome = true;
      }

      if (this.liked_biomes[i] == BiomeWater && this.is_near_water) {
        is_in_liked_biome = true;
      }
    }

    if (is_in_disliked_biome) {
      spawn_chances = this.applyCoefficientToCreature(spawn_chances);
    }

    // NLOG("chances = " + spawn_chances + " for " + this.creature_type);

    return spawn_chances;
  }

  public function fillSpawnRoller(spawn_roller: SpawnRoller):  RER_CreaturePreferences {
    spawn_roller.setCreatureCounter(this.creature_type, this.getChances());

    return this.reset();
  }

  public function fillSpawnRollerThirdParty(spawn_roller: SpawnRoller): RER_CreaturePreferences {
    spawn_roller.setThirdPartyCreatureCounter(this.creature_type, this.getChances());

    return this.reset();
  }

  private function applyCoefficientToCreature(chances: int): int {
    return (chances * this.external_factors_coefficient) as int;
  }

  private function applyCoefficientToCreatureDivide(chances: int): int {
    return (chances / this.external_factors_coefficient) as int;
  }
}
