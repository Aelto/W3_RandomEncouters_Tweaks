
state Initialising in CRandomEncounters {
  event OnEnterState(previous_state_name: name) {
    super.OnEnterState(previous_state_name);
    NLOG("Entering state Initialising");

    this.startInitialising();
  }

  entry function startInitialising() {
    NLOG("Delaying RER loading start");

    // delay init until loading screen has stopped playing
    while (theGame.IsLoadingScreenVideoPlaying()) {
      Sleep(1);
    }

    // then wait until scenes are over etc...
    while (isPlayerBusy()) {
      Sleep(0.5);
    }

    Sleep(10);

    var is_enabled: bool = theGame.GetInGameConfigWrapper().GetVarValue('RERmain', 'RERmodEnabled');
    var version: float = StringToFloat(theGame.GetInGameConfigWrapper().GetVarValue('RERmain', 'RERmodVersion'));

    if (!is_enabled && version >= 0) {
      return;
    }

    if (parent.settings.shouldResetRERSettings(theGame.GetInGameConfigWrapper())) {
      this.displayPresetChoiceDialogeMenu();
    }

    this.removeAllRerMapPins();
    this.updateSettings();

    if (!parent.storages) {
      parent.storages = RER_loadStorageCollection(parent);
    }

    parent.spawn_roller.fill_arrays();

    parent.bestiary.init();
    parent.bestiary.loadSettings();

    parent.settings.loadXMLSettings();
    parent.resources.load_resources();

    parent.events_manager.init(parent);
    parent.events_manager.start();

    parent.ecosystem_manager.init(parent);
    parent.bounty_manager.init(parent);
    parent.horde_manager.init(parent);
    parent.contract_manager.init(parent);
    parent.loot_manager.init(parent);

    RER_tutorialTryShowStarted();
    
    NLOG("ecosystem areas storage count = " + parent.storages
      .ecosystem
      .ecosystem_areas.Size());

    #ifdef DEBUG {
      RER_toggleDebug(true);
    };

    #ifndef DEBUG {
      RER_toggleDebug(false);
    };

    parent.GotoState('Loading');
  }

  latent function updateSettings() {
    var config: CInGameConfigWrapper;
    var constants: RER_Constants;
    var current_version: float;

    config = theGame.GetInGameConfigWrapper();
    constants = RER_Constants();
    current_version = StringToFloat(config.GetVarValue('RERmain', 'RERmodVersion'));

    if (current_version < 2.07) {
      config.ApplyGroupPreset('RERcontracts', 0);

      current_version = 2.07;
    }

    if (current_version < 2.08) {
      NDEBUG("[RER] The mod was updated to v2.8: the Contract System settings were reset to support the new reputation system");

      // reset the contract tutorial value so it displays again
      // config.SetVarValue('RERtutorials', 'RERtutorialMonsterContract', 1);
      config.ApplyGroupPreset('RERcontracts', 0);

      current_version = 2.08;
    }

    if (current_version < 2.09) {
      NDEBUG("[RER] The mod was updated to v2.9: the Contract System settings were reset to support updated distance settings");

      // reset the contract tutorial value so it displays again
      // config.SetVarValue('RERtutorials', 'RERtutorialMonsterContract', 1);
      config.ApplyGroupPreset('RERcontracts', 0);

      // disable any active bounty from before v2.9 since it won't be compatible
      // anymore.
      parent.storages.bounty.current_bounty.is_active = false;

      current_version = 2.09;
    }

    if (current_version < 2.11) {
      NDEBUG("[RER] The mod was updated to v2.11");

      current_version = 2.11;
    }

    if (current_version < 2.12) {
      var message: string;

      message += "You just updated the Random Encounters Reworked mod to the v2.12, the loot update.<br/><br/>";
      message += "All of your reward settings were reset following the update. ";
      message += "To simplify and streamline the loot coming from the mod, all of the old rewards were removed and replaced ";
      message += "with a central and generic system. This system called the Loot Manager offers four loot categories:";
      message += "<br/> - Gear";
      message += "<br/> - Materials";
      message += "<br/> - Consumables";
      message += "<br/> - Valuables";
      message += "<br/>And for each category it offers four loot rarities: ";
      message += "<br/> - Common";
      message += "<br/> - Uncommon";
      message += "<br/> - Rare";
      message += "<br/> - Exotic";
      message += "<br/><br/>Now every time RER wants to add loot to something, it sends a call to the loot manager which will ";
      message += "give it a list of items based on the settings you set in the menu, and this for every feature in the mod.";

      NTUTO("RER v2.12 - The loot update", message);

      config.ApplyGroupPreset('RERrewardsGeneral', 0);
      config.ApplyGroupPreset('RERcontainerRefill', 0);
      config.ApplyGroupPreset('RERkillingSpreeCustomLoot', 0);
      config.ApplyGroupPreset('RERmonsterTrophies', 0);
      config.ApplyGroupPreset('RERcontracts', 0);

      current_version = 2.12;
    }

    if (current_version < 2.13) {
      config.ApplyGroupPreset('RERmonsterTrophies', 0);

      if (RER_playerUsesEnhancedEditionRedux()) {
        config.SetVarValue('RERmonsterTrophies', 'RERtrophyMasterBuyingPrice', 30);
      }


      current_version = 2.13;
    }

    if (current_version < 3.0) {
      current_version = 3.0;

      var message: string;
      message += "Random Encounters Reworked was updated to the v3.0 - The Next-Gen update";
      NTUTO("RER v3.0 - Next-Gen update", message);
    }

    config.SetVarValue('RERmain', 'RERmodVersion', constants.version);
    theGame.SaveUserSettings();
  }

  latent function displayPresetChoiceDialogeMenu() {
    var choices: array<SSceneChoice>;
    var manager: RER_PresetManager;
    var response: SSceneChoice;

    manager = new RER_PresetManager in this;
    manager.master = parent;

    choices = manager.getChoiceList();

    while (isPlayerBusy()) {
      Sleep(5);
    }

    Sleep(5);

    (new RER_RandomDialogBuilder in thePlayer).start()
      .dialog(new REROL_whoa_in_for_one_helluva_ride in thePlayer, true)
      .play();

    response = SU_setDialogChoicesAndWaitForResponse(choices);
    SU_closeDialogChoiceInterface();
    manager.GotoState(response.playGoChunk);

    while (!manager.done) {
      SleepOneFrame();
    }

    (new RER_RandomDialogBuilder in thePlayer).start()
      .dialog(new REROL_ready_to_go_now in thePlayer, true)
      .play();

    theGame.SaveUserSettings();
  }

  private function removeAllRerMapPins() {
    SU_removeCustomPinByPredicate(new SU_CustomPinRemoverPredicateFromRER in parent);
  }
}

