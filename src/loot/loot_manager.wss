
statemachine class RER_LootManager {
  var master: CRandomEncounters;
  var loot_by_category: RER_LootByCategory!;

  function init(master: CRandomEncounters): RER_LootManager {
    this.master = master;

    this.GotoState('Loading');

    return this;
  }

  function getLootByRarityForCategory(category: RER_LootCategory): RER_LootByRarity! {
    return this.loot_by_category[category];
  }

  function getLootByCategoryAndRarity(category: RER_LootCategory, rarity: RER_LootRarity): RER_Loot! {
    var loot_by_rarity: RER_LootByRarity!;

    loot_by_rarity = this.getLootByRarityForCategory(category);

    return loot_by_rarity[rarity];
  }

  /**
   * Add the supplied item to the given category and rarity, but only if all the
   * addons allow it.
   */
  public function addLoot(category: RER_LootCategory, rarity: RER_LootRarity, item_name: name, optional origin: name) {
    var addons: array<RER_BaseAddon> = master.addon_manager.getRegisteredAddons();

    for addon: RER_BaseAddon in addons {
      if (!addon.canAddLoot(category, rarity, item_name, origin)) {
        return;
      }
    }

    this.loot_by_category[category][rarity].PushBack(item_name);
  }

  /**
   * Remove the supplied item from the given category and rarity
   */
  public function removeLoot(category: RER_LootCategory, rarity: RER_LootRarity, item_name: name) {
    this.loot_by_category[category][rarity].Remove(item_name);
  }

  public function roll(chance_multiplier: float, optional rng: RandomNumberGenerator, optional category: RER_LootCategory): array<name> {
    var output_item_names: array<name>;

    NLOG("roll(chance_multiplier: " + chance_multiplier + ", rng, category:" + category);

    // if no RNG instance was provided, create a fresh one just for the roll
    // but set it to be completely random.
    if (!rng) {
      rng = (new RandomNumberGenerator in this).useSeed(false);
    }
    
    if (category == LootCategory_None && !this.getRandomCategory(rng, category)) {
      #ifdef DEBUG_LOOT {
        NLOG("roll(), could not get random category");
      };

      return output_item_names;
    }

    #ifdef DEBUG_LOOT {
      NLOG("roll(), random category = " + category);
    };

    var loot_by_rarity: RER_LootByRarity! = this.loot_by_category[category];

    var config: CInGameConfigWrapper = theGame.GetInGameConfigWrapper();
    var amount_of_rolls: int;
    var items_per_proc: int;
    var chance_common: int;
    var chance_uncommon: int;
    var chance_rare: int;
    var chance_exotic: int;

    chance_multiplier *= StringToFloat(config.GetVarValue('RERrewardsGeneral', 'RERlootGlobalChanceMultiplier'));

    if (category == LootCategory_Gear) {
      amount_of_rolls = StringToInt(config.GetVarValue('RERrewardsGeneral', 'RERlootGearRollsAmount'));
      items_per_proc = StringToInt(config.GetVarValue('RERrewardsGeneral', 'RERlootGearItemsPerProc'));
      chance_common = StringToInt(config.GetVarValue('RERrewardsGeneral', 'RERlootGearRarityChanceCommon'));
      chance_uncommon = StringToInt(config.GetVarValue('RERrewardsGeneral', 'RERlootGearRarityChanceUncommon'));
      chance_rare = StringToInt(config.GetVarValue('RERrewardsGeneral', 'RERlootGearRarityChanceRare'));
      chance_exotic = StringToInt(config.GetVarValue('RERrewardsGeneral', 'RERlootGearRarityChanceExotic'));
    }
    else if (category == LootCategory_Materials) {
      amount_of_rolls = StringToInt(config.GetVarValue('RERrewardsGeneral', 'RERlootMaterialsRollsAmount'));
      items_per_proc = StringToInt(config.GetVarValue('RERrewardsGeneral', 'RERlootMaterialsItemsPerProc'));
      chance_common = StringToInt(config.GetVarValue('RERrewardsGeneral', 'RERlootMaterialsRarityChanceCommon'));
      chance_uncommon = StringToInt(config.GetVarValue('RERrewardsGeneral', 'RERlootMaterialsRarityChanceUncommon'));
      chance_rare = StringToInt(config.GetVarValue('RERrewardsGeneral', 'RERlootMaterialsRarityChanceRare'));
      chance_exotic = StringToInt(config.GetVarValue('RERrewardsGeneral', 'RERlootMaterialsRarityChanceExotic'));
    }
    else if (category == LootCategory_Consumables) {
      amount_of_rolls = StringToInt(config.GetVarValue('RERrewardsGeneral', 'RERlootConsumablesRollsAmount'));
      items_per_proc = StringToInt(config.GetVarValue('RERrewardsGeneral', 'RERlootConsumablesItemsPerProc'));
      chance_common = StringToInt(config.GetVarValue('RERrewardsGeneral', 'RERlootConsumablesRarityChanceCommon'));
      chance_uncommon = StringToInt(config.GetVarValue('RERrewardsGeneral', 'RERlootConsumablesRarityChanceUncommon'));
      chance_rare = StringToInt(config.GetVarValue('RERrewardsGeneral', 'RERlootConsumablesRarityChanceRare'));
      chance_exotic = StringToInt(config.GetVarValue('RERrewardsGeneral', 'RERlootConsumablesRarityChanceExotic'));
    }
    else if (category == LootCategory_Valuables) {
      amount_of_rolls = StringToInt(config.GetVarValue('RERrewardsGeneral', 'RERlootValuablesRollsAmount'));
      items_per_proc = StringToInt(config.GetVarValue('RERrewardsGeneral', 'RERlootValuablesItemsPerProc'));
      chance_common = StringToInt(config.GetVarValue('RERrewardsGeneral', 'RERlootValuablesRarityChanceCommon'));
      chance_uncommon = StringToInt(config.GetVarValue('RERrewardsGeneral', 'RERlootValuablesRarityChanceUncommon'));
      chance_rare = StringToInt(config.GetVarValue('RERrewardsGeneral', 'RERlootValuablesRarityChanceRare'));
      chance_exotic = StringToInt(config.GetVarValue('RERrewardsGeneral', 'RERlootValuablesRarityChanceExotic'));
    }
    else {
      NDEBUG("RER Error: RER_LootManager::roll(rng), unhandled category type = " + category);

      return output_item_names;
    }

    #ifdef DEBUG_LOOT {
      NLOG("roll(), amount_of_rolls = " + amount_of_rolls);
      NLOG("roll(), items_per_proc = " + items_per_proc);
      NLOG("roll(), chance_common = " + chance_common);
      NLOG("roll(), chance_uncommon = " + chance_uncommon);
      NLOG("roll(), chance_rare = " + chance_rare);
      NLOG("roll(), chance_exotic = " + chance_exotic);

      NLOG("roll(), loot_by_rarity.Size() = " + loot_by_rarity.Size());
      NLOG("roll(), loot_by_rarity[LootRarity_Common].Size() = " + loot_by_rarity[LootRarity_Common].Size());
      NLOG("roll(), loot_by_rarity[LootRarity_Uncommon].Size() = " + loot_by_rarity[LootRarity_Uncommon].Size());
      NLOG("roll(), loot_by_rarity[LootRarity_Rare].Size() = " + loot_by_rarity[LootRarity_Rare].Size());
      NLOG("roll(), loot_by_rarity[LootRarity_Exotic].Size() = " + loot_by_rarity[LootRarity_Exotic].Size());
      NLOG("roll(), this.loot_by_category.Size() = " + this.loot_by_category.Size());
    };

    while (amount_of_rolls > 0) {
      var roll_index: int = 0;

      amount_of_rolls -= 1;

      if (rng.next() < chance_common * 0.01 * chance_multiplier) {
        var i: int = items_per_proc;

        while (i) {
          i -= 1;

          roll_index = rng.nextRange(loot_by_rarity[LootRarity_Common].Size(), 0) as int;
          output_item_names.PushBack(loot_by_rarity[LootRarity_Common][roll_index]);
        }
      }

      if (rng.next() < chance_uncommon * 0.01 * chance_multiplier) {
        var i: int = items_per_proc;

        while (i) {
          i -= 1;

          roll_index = rng.nextRange(loot_by_rarity[LootRarity_Uncommon].Size(), 0) as int;
          output_item_names.PushBack(loot_by_rarity[LootRarity_Uncommon][roll_index]);
        }
      }

      if (rng.next() < chance_rare * 0.01 * chance_multiplier) {
        var i: int = items_per_proc;

        while (i) {
          i -= 1;

          roll_index = rng.nextRange(loot_by_rarity[LootRarity_Rare].Size(), 0) as int;
          output_item_names.PushBack(loot_by_rarity[LootRarity_Rare][roll_index]);
        }
      }

      if (rng.next() < chance_exotic * 0.01 * chance_multiplier) {
        var i: int = items_per_proc;

        while (i) {
          i -= 1;

          roll_index = rng.nextRange(loot_by_rarity[LootRarity_Exotic].Size(), 0) as int;
          output_item_names.PushBack(loot_by_rarity[LootRarity_Exotic][roll_index]);
        }
      }
    }

    return output_item_names;
  }

  public function rollAndGiveItemsTo(inventory: CInventoryComponent, multiplier: float, optional rng: RandomNumberGenerator, optional category: RER_LootCategory) {
    var item_names: array<name> = this.roll(multiplier, rng);

    #ifdef DEBUG_LOOT {
      var message: string = "rollAndGiveItemsTo(), Received items:";

      for item: name in item_names {
        message += " " + item + ", ";
      }

      NLOG(message);
    };

    for item: name in item_names {
      inventory.AddAnItem(item);
    }
  }

  private function getRandomCategory(rng: RandomNumberGenerator, out category: RER_LootCategory): bool {
    var config: CInGameConfigWrapper = theGame.GetInGameConfigWrapper();

    var gear: int = StringToInt(config.GetVarValue('RERrewardsGeneral', 'RERlootGearRatio'));
    var materials: int = StringToInt(config.GetVarValue('RERrewardsGeneral', 'RERlootMaterialsRatio'));
    var consumables: int = StringToInt(config.GetVarValue('RERrewardsGeneral', 'RERlootConsumablesRatio'));
    var valuables: int = StringToInt(config.GetVarValue('RERrewardsGeneral', 'RERlootValuablesRatio'));

    var total: int = gear + materials + consumables + valuables;

    #ifdef DEBUG_LOOT {
      NLOG("getRandomCategory(), total = " + total);
    };

    if (total <= 0) {
      return false;
    }

    var roll: int = rng.nextRange(total as float, 0) as int;

    #ifdef DEBUG_LOOT {
      NLOG("getRandomCategory(), gear = " + gear);
      NLOG("getRandomCategory(), materials = " + materials);
      NLOG("getRandomCategory(), consumables = " + consumables);
      NLOG("getRandomCategory(), valuables = " + valuables);
      NLOG("getRandomCategory(), roll = " + roll);
    };

    if (roll < gear && gear > 0) {
      category = LootCategory_Gear;

      return true;
    }

    roll -= gear;
    if (roll < materials && materials > 0) {
      category = LootCategory_Materials;

      return true;
    }

    roll -= materials;
    if (roll < consumables && consumables > 0) {
      category = LootCategory_Consumables;

      return true;
    }

    if (valuables > 0) {
      category = LootCategory_Valuables;

      return true;
    }

    return false;
  }
}


