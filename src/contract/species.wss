
enum RER_SpeciesTypes {
  SpeciesTypes_BEASTS = 0,
  SpeciesTypes_INSECTOIDS = 1,
  SpeciesTypes_NECROPHAGES = 2,
  SpeciesTypes_OGROIDS = 3,
  SpeciesTypes_SPECTERS = 4,
  SpeciesTypes_CURSED = 5,
  SpeciesTypes_DRACONIDS = 6,
  SpeciesTypes_ELEMENTA = 7,
  SpeciesTypes_HYBRIDS = 8,
  SpeciesTypes_RELICTS = 9,
  SpeciesTypes_VAMPIRES = 10,

  SpeciesTypes_MAX = 11,
  SpeciesTypes_NONE = 12,
}

function RER_getRandomSpeciesType(): RER_SpeciesTypes {
  return RandRange(SpeciesTypes_MAX) as RER_SpeciesTypes;
}

function RER_getSeededRandomSpeciesType(rng: RandomNumberGenerator): RER_SpeciesTypes {
  var max: float;

  max = ((SpeciesTypes_MAX as int) as float);

  return RoundF(rng.nextRange(max, 0)) as RER_SpeciesTypes;
}

function RER_getSeededRandomEasySpeciesType(rng: RandomNumberGenerator): RER_SpeciesTypes {
  var max: float;

  // Exclude specters for EE users.
  if (RER_playerUsesEnhancedEditionRedux()) {
    max = ((SpeciesTypes_SPECTERS as int) as float);
  }
  else {
    max = ((SpeciesTypes_CURSED as int) as float);
  }

  return RoundF(rng.nextRange(max, 0)) as RER_SpeciesTypes;
}

latent function RER_getSeededRandomCreatureType(master: CRandomEncounters, difficulty_level: RER_ContractDifficultyLevel, rng: RandomNumberGenerator): CreatureType {
  var creature_types: array<CreatureType>;
  var bestiary_entry: RER_BestiaryEntry;
  var maxmimum_strength: float;
  var i: int;
  
  master.spawn_roller.reset();

  maxmimum_strength = MaxF(difficulty_level.value, 5);

  var current_region: string = SUH_getCurrentRegion();
  var manager : CWitcherJournalManager;

  #ifdef ENABLE_BESTIARY_FEATURE {
    if (master.settings.only_known_bestiary_creatures) {
      manager = theGame.GetJournalManager();
    }
  };

  for (i = 0; i < CreatureMAX; i += 1) {
    bestiary_entry = master.bestiary.getEntry(master, i);

    #ifdef ENABLE_BESTIARY_FEATURE {
      if (master.settings.only_known_bestiary_creatures) {
        var can_spawn_creature: bool = bestiaryCanSpawnEnemyTemplateList(master.bestiary.entries[i].template_list, manager);

        if (!can_spawn_creature) {
          continue;
        }
      }
    };

    if (bestiary_entry.ecosystem_delay_multiplier > maxmimum_strength) {
      continue;
    }

    if (!RER_isRegionConstraintValid(bestiary_entry.region_constraint, current_region)) {
      continue;
    }

    creature_types.PushBack(i);
  }

  return creature_types[rng.nextRange(creature_types.Size(), 0) as int];
}

function RER_getSpeciesLocalizedString(species: RER_SpeciesTypes): string {
  var output: string;
  
  switch (species) {
    case SpeciesTypes_BEASTS:
      output = GetLocStringByKey("rer_species_beasts");
      break;
    
    case SpeciesTypes_CURSED:
      output = GetLocStringByKey("rer_species_cursed");
      break;

    case SpeciesTypes_DRACONIDS:
      output = GetLocStringByKey("rer_species_draconids");
      break;

    case SpeciesTypes_ELEMENTA:
      output = GetLocStringByKey("rer_species_elementa");
      break;

    case SpeciesTypes_HYBRIDS:
      output = GetLocStringByKey("rer_species_hybrids");
      break;

    case SpeciesTypes_INSECTOIDS:
      output = GetLocStringByKey("rer_species_insectoids");
      break;

    case SpeciesTypes_NECROPHAGES:
      output = GetLocStringByKey("rer_species_necrophages");
      break;

    case SpeciesTypes_OGROIDS:
      output = GetLocStringByKey("rer_species_ogroids");
      break;

    case SpeciesTypes_RELICTS:
      output = GetLocStringByKey("rer_species_relicts");
      break;

    case SpeciesTypes_SPECTERS:
      output = GetLocStringByKey("rer_species_specters");
      break;

    case SpeciesTypes_VAMPIRES:
      output = GetLocStringByKey("rer_species_vampires");
      break;
  }

  return output;
}

function RER_getSpeciesFromLocalizedString(localized_string: string): RER_SpeciesTypes {
  if (StrContains(localized_string, GetLocStringByKey("rer_species_beasts"))) {
    return SpeciesTypes_BEASTS;
  }
    
  if (StrContains(localized_string, GetLocStringByKey("rer_species_cursed"))) {
    return SpeciesTypes_CURSED;
  }

  if (StrContains(localized_string, GetLocStringByKey("rer_species_draconids"))) {
    return SpeciesTypes_DRACONIDS;
  }

  if (StrContains(localized_string, GetLocStringByKey("rer_species_elementa"))) {
    return SpeciesTypes_ELEMENTA;
  }

  if (StrContains(localized_string, GetLocStringByKey("rer_species_hybrids"))) {
    return SpeciesTypes_HYBRIDS;
  }

  if (StrContains(localized_string, GetLocStringByKey("rer_species_insectoids"))) {
    return SpeciesTypes_INSECTOIDS;
  }

  if (StrContains(localized_string, GetLocStringByKey("rer_species_necrophages"))) {
    return SpeciesTypes_NECROPHAGES;
  }

  if (StrContains(localized_string, GetLocStringByKey("rer_species_ogroids"))) {
    return SpeciesTypes_OGROIDS;
  }

  if (StrContains(localized_string, GetLocStringByKey("rer_species_relicts"))) {
    return SpeciesTypes_RELICTS;
  }

  if (StrContains(localized_string, GetLocStringByKey("rer_species_specters"))) {
    return SpeciesTypes_SPECTERS;
  }

  if (StrContains(localized_string, GetLocStringByKey("rer_species_vampires"))) {
    return SpeciesTypes_VAMPIRES;
  }

  return SpeciesTypes_NONE;
}