
/**
 * Summary of the whole Contract system:
 *  - An errand injector adds a notice to every noticeboard in the game
 *  - When the errand is picked, it notifies the ContractManager which
 *    displays a list of contracts the user can start.
 *  - There is a limited amount of contracts per hour (by default)
 *  - For contracts to be restricted per noticeboard, the noticeboards as
 *    well as the contract have a unique identifier.
 *  - These identifiers are used to determine if the same contract was
 *    already completed from the same noticeboard.
 *  - When a contract is started, it selects a random location in the
 *    world, as well a random reward and a random species.
 *  - Every thing random in contracts are generated from a seeded RNG
 *  - The seed is obtained from the noticeboard and the current
 *    generation time.
 *  - Contracts do not persist in the save, but are regenerated every
 *    the player is nearby.
 *  - The available rewards depend on the region and also on the
 *    noticeboard.
 */
statemachine class RER_ContractManager {
  var master: CRandomEncounters;
  var selected_difficulty: RER_ContractDifficultyLevel;

  function init(_master: CRandomEncounters) {
    this.master = _master;

    this.GotoState('Waiting');
  }

  public function pickedContractNoticeFromNoticeboard(errand_name: string) {
    this.GotoState('DifficultySelection');
  }

  public function contractHaggleDifficultySelected(difficulty: RER_ContractDifficultyLevel) {
    this.selected_difficulty = difficulty;

    this.GotoState('DialogChoice');
  }

  public function getGenerationTime(time: int): RER_GenerationTime {
    var required_time_elapsed: float;

    required_time_elapsed = StringToFloat(
      theGame.GetInGameConfigWrapper()
      .GetVarValue('RERcontracts', 'RERhoursBeforeNewContracts')
    );

    // special scenario, 0 means it will generate new contracts every time the
    // board is opened.
    if (required_time_elapsed <= 0) {
      return RER_GenerationTime(RoundF(RandF() * 1000 - 500));
    }

    return RER_GenerationTime(time / required_time_elapsed);
  }

  public function isItTimeToRegenerateContracts(generation_time: RER_GenerationTime): bool {
    return this.master.storages.contract.last_generation_time.time != generation_time.time;
  }

  public function hasCompletedContractSinceLastGeneration(): bool {
    return this.master.storages.contract.completed_contracts.Size() > 0;
  }

  public function updateStorageGenerationTime(generation_time: RER_GenerationTime) {
    this.master.storages.contract.last_generation_time = generation_time;
    this.master.storages.contract.completed_contracts.Clear();
    this.master.storages.contract.save();
  }

  public function decreaseReputationFromInactivity() {
    var current_reputation: float = RER_getContractReputationFactValue();
    var reputation_loss: float = current_reputation * -0.05;

    RER_addContractReputationFactValue(reputation_loss as int);
  }

  public function isContractInStorageCompletedContracts(contract: RER_ContractIdentifier): bool {
    var i: int;

    for (i = 0; i < this.master.storages.contract.completed_contracts.Size(); i += 1) {
      NLOG("isContractInStorageCompletedContracts, " + this.master.storages.contract.completed_contracts[i].identifier + " == " + contract.identifier);

      if (this.master.storages.contract.completed_contracts[i].identifier == contract.identifier) {
        return true;
      }
    }

    return false;
  }

  public function getUniqueIdFromNoticeboard(noticeboard: W3NoticeBoard): RER_NoticeboardIdentifier {
    var position: Vector;
    var heading: float;
    var uuid: string;

    position = noticeboard.GetWorldPosition();
    heading = noticeboard.GetHeading();

    uuid += RoundF(position.X) + "-";
    uuid += RoundF(position.Y) + "-";
    uuid += RoundF(position.Z) + "-";
    uuid += RoundF(heading);

    return RER_NoticeboardIdentifier(uuid);
  }

  public function getUniqueIdFromContract(noticeboard: RER_NoticeboardIdentifier, difficulty: RER_ContractDifficultyLevel, creature_type: CreatureType, generation_time: RER_GenerationTime, optional index: int): RER_ContractIdentifier {
    var uuid: string;

    uuid += noticeboard.identifier + "-";
    uuid += RoundF(generation_time.time) + "-";
    uuid += 100 + (difficulty.value as int) + "-";
    uuid += 10 + (creature_type as int) + "-";
    uuid += IntToString(index);

    return RER_ContractIdentifier(uuid);
  }

  public function generateContract(data: RER_ContractGenerationData): RER_ContractRepresentation {
    var contract: RER_ContractRepresentation;
    var rng: RandomNumberGenerator;

    contract = RER_ContractRepresentation();
    rng = (new RandomNumberGenerator in this).setSeed(data.rng_seed)
      .useSeed(true);

    contract.identifier = data.identifier;
    contract.noticeboard_identifier = data.noticeboard_identifier;
    contract.destination_point = this.getRandomDestinationAroundPoint(data.starting_point, rng);
    contract.destination_radius = 100;

    contract.creature_type = data.creature_type;
    contract.difficulty_level = data.difficulty_level;
    contract.region_name = data.region_name;
    contract.rng_seed = data.rng_seed;
    contract.reward_type = RER_getAllowedContractRewardsMaskFromRegion()
                         | RER_getRandomAllowedRewardType(this, data.noticeboard_identifier);

    NLOG("generateContract, reward_type = " + contract.reward_type);

    // TODO: once the PR that allows us to get the creature type right here is
    // merged, replace the difficulty check with a creature strength check.
    if (data.difficulty_level.value < 9) {
      if (rng.nextRange(10, 0) < 5) {
        contract.event_type = ContractEventType_HORDE;
      }
      else if (rng.nextRange(10, 0) < 5) {
        contract.event_type = ContractEventType_NEST;
      }
    }
    else {
      contract.event_type = ContractEventType_BOSS;
    }

    return contract;
  }

  public function getRandomDestinationAroundPoint(starting_point: Vector, rng: RandomNumberGenerator): Vector {
    var closest_points: array<Vector>;
    var quarter: int;
    var half: int;
    var index: int;
    var size: int;

    closest_points = this.getClosestDestinationPoints(starting_point);

    // since it can return less than what we asked for
    size = closest_points.Size();
    quarter = RoundF(size * 0.25);
    if (size <= 0) {
      NDEBUG("ERROR: no available location for contract was found");
    }

    if (SUH_getCurrentRegion() == "prolog_village") {
      // white orchard doesn't have enough POIs to pick only a portion of them,
      // instead we pick all of them:
      index = rng.nextRange(size, 0) as int;
    }
    else {
      if (rng.next() < 0.10) {
        // between 25% and 50%
        index = rng.nextRange(quarter * 2, quarter) as int;
      }
      else if (rng.next() < 0.20) {
        // the first 25%
        index = rng.nextRange(quarter, 0) as int;
      }
      else {
        // the first 12.5%
        index = rng.nextRange(RoundF(quarter * 0.5), 0) as int;
      }
    }

    NLOG("getRandomDestinationAroundPoint, " + index + " size = " + size );

    return closest_points[index];
  }

  public function getClosestDestinationPoints(starting_point: Vector): array<Vector> {
    var sorter_data: array<SU_ArraySorterData>;
    var mappins: array<SEntityMapPinInfo>;
    var entities: array<CGameplayEntity>;
    var current_position: Vector;
    var current_distance: float;
    var current_region: string;
    var output: array<Vector>;
    var i: int;

    current_region = AreaTypeToName(theGame.GetCommonMapManager().GetCurrentArea());

    #ifdef ENABLE_STATIC_ENCOUNTERS {
      for (i = 0; i < this.master.static_encounter_manager.static_encounters.Size(); i += 1) {
        if (!this.master.static_encounter_manager.static_encounters[i].isInRegion(current_region)) {
          continue;
        }

        current_position = this.master.static_encounter_manager.static_encounters[i].position;
        current_distance = VecDistanceSquared2D(starting_point, current_position);

        sorter_data.PushBack((new RER_ContractLocation in this).init(current_position, current_distance));
      }
    };

    // We use a list of point of interests across the map
    mappins = this.getPointOfInterests();
    for (i = 0; i < mappins.Size(); i += 1) {
      current_position = mappins[i].entityPosition;
      current_distance = VecDistanceSquared2D(starting_point, current_position);

      sorter_data.PushBack((new RER_ContractLocation in this).init(current_position, current_distance));
    }

    // We also fetch entities with a custom tag to support
    // custom point of interests. This can prove useful in
    // new maps from mod who may want to add support for RER
    // contracts
    FindGameplayEntitiesInRange(
      entities,
      thePlayer,
      10000, // range
      500, // maxresults
      'RER_contractPointOfInterest', // tag
    );

    for (i = 0; i < entities.Size(); i += 1) {
      current_position = entities[i].GetWorldPosition();
      current_distance = VecDistanceSquared2D(starting_point, current_position);

      sorter_data.PushBack((new RER_ContractLocation in this).init(current_position, current_distance));
    }

    // we re-use the same variable here
    sorter_data = SU_sortArray(sorter_data);

    for (i = 0; i < sorter_data.Size(); i += 1) {
      output.PushBack((sorter_data[i] as RER_ContractLocation).position);
    }

    return output;
  }

  private function getPointOfInterests(): array<SEntityMapPinInfo> {
    var output: array<SEntityMapPinInfo>;
    var all_pins: array<SEntityMapPinInfo>;
    var i: int;

    all_pins = theGame.GetCommonMapManager().GetEntityMapPins(theGame.GetWorld().GetDepotPath());

    for (i = 0; i < all_pins.Size(); i += 1) {
      if (all_pins[i].entityType == 'MonsterNest'
       || all_pins[i].entityType == 'InfestedVineyard'
      //  || all_pins[i].entityType == 'PlaceOfPower'
       || all_pins[i].entityType == 'BanditCamp'
       || all_pins[i].entityType == 'BanditCampfire'
       || all_pins[i].entityType == 'BossAndTreasure'
       || all_pins[i].entityType == 'RescuingTown'
       || all_pins[i].entityType == 'DungeonCrawl'
       || all_pins[i].entityType == 'Hideout'
       || all_pins[i].entityType == 'Plegmund'
       || all_pins[i].entityType == 'KnightErrant'
       || all_pins[i].entityType == 'WineContract'
       || all_pins[i].entityType == 'SignalingStake'
       || all_pins[i].entityType == 'MonsterNest'
       || all_pins[i].entityType == 'TreasureHuntMappin'
       || all_pins[i].entityType == 'PointOfInterestMappin'
        // the same pins but with Disabled at the end
       || all_pins[i].entityType == 'MonsterNestDisabled'
       || all_pins[i].entityType == 'InfestedVineyardDisabled'
      //  || all_pins[i].entityType == 'PlaceOfPowerDisabled'
       || all_pins[i].entityType == 'BanditCampDisabled'
       || all_pins[i].entityType == 'BanditCampfireDisabled'
       || all_pins[i].entityType == 'BossAndTreasureDisabled'
       || all_pins[i].entityType == 'RescuingTownDisabled'
       || all_pins[i].entityType == 'DungeonCrawlDisabled'
       || all_pins[i].entityType == 'HideoutDisabled'
       || all_pins[i].entityType == 'PlegmundDisabled'
       || all_pins[i].entityType == 'KnightErrantDisabled'
       || all_pins[i].entityType == 'WineContractDisabled'
       || all_pins[i].entityType == 'SignalingStakeDisabled'
       || all_pins[i].entityType == 'MonsterNestDisabled'
       || all_pins[i].entityType == 'TreasureHuntMappinDisabled'
       || all_pins[i].entityType == 'PointOfInterestMappinDisabled'
       || all_pins[i].entityType == 'PointOfInterestMappinDisabled') {
        output.PushBack(all_pins[i]);
      }
    }

    return output;
  }

  public function completeCurrentContract() {
    var storage: RER_ContractStorage;

    storage = this.master.storages.contract;

    if (!storage.has_ongoing_contract) {
      return;
    }

    NLOG("completeCurrentContract, uuid = " + storage.active_contract.identifier.identifier);

    storage.completed_contracts.PushBack(storage.active_contract.identifier);
    storage.has_ongoing_contract = false;

    if (RER_getContractRewardOption() == RER_ContractRewardOption_CROWNS) {
      this.giveCrownsReward(storage);
    }
    else {
      this.giveTokensReward(storage);
    }

    RER_addContractReputationFactValue(1);

    storage.save();
  }

  private function giveCrownsReward(storage: RER_ContractStorage) {
    var bestiary_entry: RER_BestiaryEntry = this.master.bestiary
      .getEntry(this.master, storage.active_contract.creature_type);

    var strength: float = bestiary_entry.ecosystem_delay_multiplier;
    var contract_difficulty: int = storage.active_contract.difficulty_level.value;
    var enemy_count: int = bestiary_entry.getSpawnCount(this.master);
    
    var crowns_amount_settings: float =  master.settings.crowns_amounts_by_encounter[EncounterType_CONTRACT]
      * bestiary_entry.crowns_percentage
      * RandRangeF(1.2, 0.8);

    var final_crowns_amount: float = contract_difficulty
      / strength
      * crowns_amount_settings
      * enemy_count;

    thePlayer.AddMoney(final_crowns_amount as int);
    thePlayer.DisplayItemRewardNotification('Crowns', final_crowns_amount as int);
    theSound.SoundEvent("gui_inventory_buy");
    thePlayer.DisplayHudMessage(GetLocStringByKeyExt("rer_contract_finished"));
  }

  private function giveTokensReward(storage: RER_ContractStorage) {
    var rng: RandomNumberGenerator = (new RandomNumberGenerator in this)
      .setSeed(storage.active_contract.rng_seed)
      .useSeed(true);

    var token_name: name = RER_contractRewardTypeToItemName(
      RER_getRandomContractRewardTypeFromFlag(storage.active_contract.reward_type, rng)
    );

    NLOG("completeCurrentContract, token_name = " + token_name + " flag = " + storage.active_contract.reward_type);

    // one additional token every 7 levels
    var tokens_amount: int = RoundF(storage.active_contract.difficulty_level.value / 7)
      + 1;

    if (IsNameValid(token_name)) {
      thePlayer.GetInventory().AddAnItem(token_name, tokens_amount);
      thePlayer.DisplayItemRewardNotification(token_name, tokens_amount);
      theSound.SoundEvent("gui_inventory_buy");
      thePlayer.DisplayHudMessage(GetLocStringByKeyExt("rer_contract_finished"));
    }
    else {
      NDEBUG(
        "RER ERROR: the name of the token is not valid [" + token_name + "]." +
        "You can report this issue to the author, preferably with a copy/screenshot of this message." +
        "<br/>Additional information:" +
        "<br/> - seed: " + storage.active_contract.rng_seed +
        "<br/> - reward type: " + storage.active_contract.reward_type +
        "<br/> - identifier: " + storage.active_contract.identifier.identifier
      );
    }
  }

  public function hasRequiredReputationForVanillaContracts(): bool {
    var vanilla_contracts_requirement: int;
    var reputation_system_enabled: bool;
    var current_reputation: int;

    reputation_system_enabled = theGame.GetInGameConfigWrapper()
      .GetVarValue('RERcontracts', 'RERcontractsReputationSystemEnabled');

    if (!reputation_system_enabled) {
      return true;
    }

    vanilla_contracts_requirement = StringToInt(
      theGame.GetInGameConfigWrapper()
      .GetVarValue('RERcontracts', 'RERcontractsReputationSystemVanillaContractsRequirement')
    );

    current_reputation = RER_getContractReputationFactValue();

    return current_reputation >= vanilla_contracts_requirement;
  }

  public function getMaximumDifficultyForReputation(reputation: int): int {
    return 3 + reputation;
  }

  public function getImpactPointsForDifficulty(difficulty: RER_ContractDifficultyLevel): float {
    // difficulty at 0 = -12.000000
    // difficulty at 10 = -7.843841
    // difficulty at 20 = -2.853748
    // difficulty at 40 = 21.515038
    // difficulty at 50 = 49.504101
    // difficulty at 60 = 72.304886
    // difficulty at 80 = 116.740753
    // difficulty at 99 = 158.036987
    //
    // tweak the last number to control how low it can go in the negatives.
    // Lower the number the higher it starts.
    //
    // Cap the level to 50 in the exponential function to avoid crazy numbers
    // at higher levels
    return ExpF(Min(difficulty.value, 50) * 0.055)
         * LogF(difficulty.value + 1)
         // add a linear function for levels above 50
         + Max(0, difficulty.value - 50) * 2
         - 0; // used to -12 to give maluses to early contracts
  }

  public function getNearbyNoticeboard(): W3NoticeBoard {
    var entities: array<CGameplayEntity>;
    var board: W3NoticeBoard;
    var i: int;

    FindGameplayEntitiesInRange(
      entities,
      thePlayer,
      20, // range, 
      1, // max results
      , // tag: optional value
      FLAG_ExcludePlayer,
      , // optional value
      'W3NoticeBoard'
    );

    // bold move here, if there are no noticeboard nearby the game will crash.
    board = entities[0] as W3NoticeBoard;

    return board;
  }

  public function canSelectContractDifficulty(): bool {
    return theGame.GetInGameConfigWrapper()
      .GetVarValue('RERcontracts', 'RERallowSelectDifficulty');
  }
}