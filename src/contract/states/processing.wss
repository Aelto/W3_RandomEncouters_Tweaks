
state Processing in RER_ContractManager {
  var oneliner: RER_Oneliner;
  var is_spawned: bool;

  var debug_oneliner: SU_OnelinerScreen;

  var primary_target_encounters: array<RandomEncountersReworkedHuntingGroundEntity>;


  event OnEnterState(previous_state_name: name) {
    super.OnEnterState(previous_state_name);

    NLOG("RER_ContractManager - Processing");

    this.Processing_main();
  }

  entry function Processing_main() {
    var contract: RER_Contract = (new RER_Contract in parent)
      .init(parent.getOngoingContractFactory());

    this.debug_oneliner = SU_onelinerScreen(
      "[RER CONTRACT DEBUG OL]",
      Vector(0.1, 0.8)
    );

    this.verifyContractRegion();
    this.createContractRegionMapPins(contract);

    var finished: bool = this.waitForPlayerToFinishContract(contract);
    this.cleanupEncounters();
    this.debug_oneliner.unregister();

    if (finished) {
      parent.completeOngoingContract();
    }

    parent.GotoState('Waiting');
  }

  function verifyContractRegion() {
    if (!parent.hasOngoingContract()) {
      return;
    }

    if (SUH_isPlayerInRegion(parent.master.storages.contract.active_contract.region_name)) {
      return;
    }

    NHUD(
      StrReplace(
        GetLocStringByKey("rer_strayed_too_far_cancelled"),
        "{{thing}}",
        StrLower(GetLocStringByKey("rer_contract"))
      )
    );

    theSound.SoundEvent("gui_global_denied");
    parent.endOngoingContract();
  }

  function createContractRegionMapPins(contract: RER_Contract) {
    SU_removeCustomPinByTag("RER_contract_target");

    var destinations: array<Vector> = contract.destinations();

    for destination: Vector in destinations {
      var map_pin: SU_MapPin = new SU_MapPin in parent;
      map_pin.tag = "RER_contract_target";
      map_pin.pin_tag = 'RER_contract_target';
      map_pin.is_fast_travel = true;
      map_pin.position = destination;
      map_pin.description = GetLocStringByKey("rer_mappin_regular_description");
      map_pin.label = GetLocStringByKey("rer_mappin_regular_title");
      map_pin.type = "MonsterQuest";
      map_pin.filtered_type = "MonsterQuest";
      map_pin.radius = contract.destinationRadius();
      map_pin.region = SUH_getCurrentRegion();
      map_pin.appears_on_minimap = theGame.GetInGameConfigWrapper()
        .GetVarValue('RERoptionalFeatures', 'RERminimapMarkerBounties');

      SUMP_addCustomPin(map_pin);
    }
    
    SU_updateMinimapPins();
    theSound.SoundEvent("gui_hubmap_mark_pin");
  }


  latent function waitForPlayerToFinishContract(contract: RER_Contract): bool {
    var primary_targets: array<CreatureType> = contract.speciesList();
    var killed_encounters_count: int = 0;
  
    while (true) {
      killed_encounters_count += this.processEndedPrimaryEncounters();
  
      if (!isPlayerBusy()) {
        var locations: array<Vector> = contract.destinations();
        var location_index: int = 0;
        for (location_index = 0; i location_index < locations.Size(); location_index += 1) {
          var location: Vector = locations[location_index];
          var is_in_area: bool = this.isPlayerInArea(
            thePlayer.GetWorldPosition(),
            location,
            contract
          );

          if (is_in_area) {
            if (location_index < primary_targets.Size()) {
              this.spawnPrimaryTarget(
                spawnPrimaryTarget,
                primary_targets[location_index],
                location_index
              );
            }
          }
        }
      }

      Sleep(10);
    }

    return killed_encounters_count >= primary_targets.Size();
  }

  function isPlayerInArea(player_position: Vector, position: Vector, contract: RER_Contract): bool {
    var radius: float = contract.destinationRadius();

    return VecDistanceSquared2D(
      player_position,
      position
    ) <= radius * radius;
  }

  latent function spawnPrimaryTarget(
    contract: RER_Contract,
    species: CreatureType,
    index: int
  ) {
    var position: Vector = thePlayer.GetWorldPosition()
      + contract.getPrimaryTargetOffset(index);

    getGroundPosition(position);

    var encounter: RandomEncountersReworkedHuntingGroundEntity = this.spawnEncounter(
      species,
      position,
      contract
    );

    this.primary_target_encounters.PushBack(encounter);
  }


  latent function spawnEncounter(species: CreatureType, position: Vector, contract: RER_Contract): RandomEncountersReworkedHuntingGroundEntity {
    var bestiary_entry: RER_BestiaryEntry = parent.master.bestiary
      .getEntry(parent.master, species);

    var count: int = RoundF(
      bestiary_entry.getSpawnCount(parent.master) as float
      * contract.enemyCountMultiplier()
    );

    var entities: array<CEntity> = bestiary_entry.spawn(
      parent.master,
      position,
      count, //count
      , // density
      EncounterType_CONTRACT,
      RER_BESF_NO_BESTIARY_FEATURE | RER_BESF_NO_PERSIST,
      'RandomEncountersReworked_ContractCreature',
      // a high number to make sure there is no composition as we'll spawn them
      // manually.
      10000,
      this.getDamageModifiers(contract)
    );

    var rer_entity_template: CEntityTemplate = LoadResourceAsync(
      "dlc\modtemplates\randomencounterreworkeddlc\data\rer_hunting_ground_entity.w2ent",
      true
    ) as CEntityTemplate;

    var rer_entity: RandomEncountersReworkedHuntingGroundEntity = theGame
      .CreateEntity(
        rer_entity_template,
        position,
        thePlayer.GetWorldRotation()
      ) as RandomEncountersReworkedHuntingGroundEntity;

    rer_entity.manual_destruction = true;
    rer_entity.startEncounter(parent.master, entities, bestiary_entry);

    return rer_entity;
  }

  function getDamageModifiers(contract: RER_Contract): SU_BaseDamageModifier {
    var damage_modifier: SU_BaseDamageModifier = new SU_BaseDamageModifier in parent;
    damage_modifier.damage_received_modifier = contract.damageReceivedModifier();
    damage_modifier.damage_dealt_modifier = contract.damageDealtModifier();

    return damage_modifier;
  }

  latent function processEndedPrimaryEncounters(): int {
    var encounters_to_remove: array<RandomEncountersReworkedHuntingGroundEntity>;
    var killed_encounters: int;

    for encounter: RandomEncountersReworkedHuntingGroundEntity in this.primary_target_encounters {
      if (encounter.GetCurrentStateName() == 'Ending') {
        encounter.clean();

        killed_encounters += 1;
        encounters_to_remove.PushBack(encounter);
      }
    }

    for encounter: RandomEncountersReworkedHuntingGroundEntity in encounters_to_remove {
      this.primary_target_encounters.Remove(encounter);
    }

    return killed_encounters;
  }

  latent function cleanupEncounters() {
    for encounter: RandomEncountersReworkedHuntingGroundEntity in this.primary_target_encounters {
      encounter.clean();
    }

    for encounter: RandomEncountersReworkedHuntingGroundEntity in this.secondary_target_encounters {
      encounter.clean();
    }
  }
}