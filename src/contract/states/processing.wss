
state Processing in RER_ContractManager {
  var target_encounters: array<RER_ContractTargetEncounter>;
  var oneliners: array<RER_Oneliner>;

  event OnEnterState(previous_state_name: name) {
    super.OnEnterState(previous_state_name);

    NLOG("RER_ContractManager - Processing");

    this.Processing_main();
  }

  entry function Processing_main() {
    if (!parent.hasOngoingContract()) {
      parent.GotoState('Waiting');
      return;
    }

    var contract: RER_Contract = (new RER_Contract in parent)
      .init(parent.getOngoingContractFactory());

    this.verifyContractRegion();
    this.createContractRegionMapPins(contract);
    this.createContractOneliners(contract);

    var finished: bool = this.waitForPlayerToFinishContract(contract);
    this.cleanupEncounters();
    this.cleanupOneliners();

    if (finished) {
      parent.completeOngoingContract();
    }

    parent.GotoState('Waiting');
  }

  function verifyContractRegion() {
    if (!parent.hasOngoingContract()) {
      return;
    }

    if (SUH_isPlayerInRegion(parent.master.storages.contract.active_contract.region_name)) {
      return;
    }

    NHUD(
      StrReplace(
        GetLocStringByKey("rer_strayed_too_far_cancelled"),
        "{{thing}}",
        StrLower(GetLocStringByKey("rer_contract"))
      )
    );

    theSound.SoundEvent("gui_global_denied");
    parent.endOngoingContract();
  }

  function createContractRegionMapPins(contract: RER_Contract) {
    SU_removeCustomPinByTag("RER_contract_target");

    var destinations: array<Vector> = contract.destinations(
      RER_getContractTargetsSpread()
    );

    for destination: Vector in destinations {
      var map_pin: SU_MapPin = new SU_MapPin in parent;
      map_pin.tag = "RER_contract_target";
      map_pin.pin_tag = 'RER_contract_target';
      map_pin.is_fast_travel = false;
      map_pin.position = destination;
      map_pin.description = GetLocStringByKey("rer_mappin_regular_description");
      map_pin.label = GetLocStringByKey("rer_mappin_regular_title");
      map_pin.type = "MonsterQuest";
      map_pin.filtered_type = "MonsterQuest";
      map_pin.radius = contract.destinationRadius();
      map_pin.region = SUH_getCurrentRegion();
      map_pin.appears_on_minimap = theGame.GetInGameConfigWrapper()
        .GetVarValue('RERoptionalFeatures', 'RERminimapMarkerBounties');

      SUMP_addCustomPin(map_pin);
    }
    
    SU_updateMinimapPins();
    theSound.SoundEvent("gui_hubmap_mark_pin");
  }

  function createContractOneliners(contract: RER_Contract) {
    if (!RER_menu('RERoptionalFeatures', 'RERonelinersContract')) {
      return;
    }

    var destinations: array<Vector> = contract.destinations(
      RER_getContractTargetsSpread()
    );

    for destination: Vector in destinations {
      this.oneliners.PushBack(
        RER_oneliner(
          " <img src='img://icons/quests/monsterhunt.png' vspace='-10' />",
          destination
        )
      );
    }
  }

  latent function waitForPlayerToFinishContract(contract: RER_Contract): bool {
    var primary_targets: array<CreatureType> = contract.speciesList();
    var locations: array<Vector> = contract.destinations(
      RER_getContractTargetsSpread()
    );

    var i: int = 0;
    for (i = 0; i < primary_targets.Size(); i += 1) {
      this.target_encounters.PushBack(
        (new RER_ContractTargetEncounter in this).init(
          i,
          locations[i],
          primary_targets[i],
          parent
        )
      );
    }
  
    while (true) {
      if (parent.areAllTargetsKilled()) {
        return true;
      }

      var destination_radius: float = contract.destinationRadius();
      var player_position: Vector = thePlayer.GetWorldPosition();

      for target_encounter: RER_ContractTargetEncounter in this.target_encounters {
        if (target_encounter.isSpawnedAndKilled()) {
          parent.setTargetKilled(target_encounter.index);
        }

        if (target_encounter.canSpawn(player_position, destination_radius)) {
          if (!parent.master.hasJustBooted()) {
            theGame.SaveGame( SGT_QuickSave, -1 );
          }

          theSound.SoundEvent("gui_ingame_new_journal");
          this.unregisterNearbyOneliners(
            target_encounter.location,
            contract.destinationRadius()
          );

          thePlayer.DisplayHudMessage(
            StrReplace(
              GetLocStringByKeyExt("rer_kill_target"),
              "{{type}}",
              getCreatureNameFromCreatureType(
                parent.master.bestiary,
                target_encounter.species
              )
            )
          );

          target_encounter.spawn(contract);
          Sleep(0.5);
        }
      }

      Sleep(5);
    }

    return parent.areAllTargetsKilled();
  }

  function unregisterNearbyOneliners(position: Vector, radius: float) {
    for oneliner: RER_Oneliner in this.oneliners {
      if (VecDistanceSquared2D(oneliner.position, position) <= radius * radius) {
        oneliner.unregister();
      }
    }
  }

  latent function cleanupEncounters() {
    for target_encounter: RER_ContractTargetEncounter in this.target_encounters {
      target_encounter.cleanupEncounter();
    }
  }

  function cleanupOneliners() {
    for oneliner: RER_Oneliner in this.oneliners {
      oneliner.unregister();
    }
  }
}

class RER_ContractTargetEncounter {
  var manager: RER_ContractManager;

  var index: int;
  var location: Vector;
  var species: CreatureType;

  var encounter: RandomEncountersReworkedHuntingGroundEntity;

  public function init(
    index: int,
    location: Vector,
    species: CreatureType,
    manager: RER_ContractManager
  ): RER_ContractTargetEncounter {
    this.index = index;
    this.location = location;
    this.manager = manager;
    this.species = species;

    return this;
  }

  public function canSpawn(player_position: Vector, radius: float): bool {
    return !this.isSpawned()
        && !this.isEncounterFinished()
        && this.isPlayerInArea(player_position, radius);
  }

  public function isEncounterFinished(): bool {
    return this.isTargetKilledStorage()
        || this.isSpawnedAndKilled();
  }

  public function isSpawnedAndKilled(): bool {
    return this.isSpawned()
        && this.encounter.GetCurrentStateName() == 'Ending';
  }

  private function isPlayerInArea(player_position: Vector, radius: float): bool {
    return VecDistanceSquared2D(
      player_position,
      location
    ) <= radius * radius;
  }

  private function isTargetKilledStorage(): bool {
    return this.manager.isTargetKilled(this.index);
  }

  private function isSpawned(): bool {
    if (this.encounter) {
      return true;
    }

    return false;
  }

  public latent function spawn(contract: RER_Contract) {
    this.spawnPrimaryTarget(
      contract,
      this.species,
      this.location
    );
  }

  latent function spawnPrimaryTarget(
    contract: RER_Contract,
    species: CreatureType,
    position: Vector,
  ) {
    getGroundPosition(position);

    var encounter: RandomEncountersReworkedHuntingGroundEntity = this.spawnEncounter(
      contract,
      species,
      position
    );

    this.encounter = encounter;
  }

  private latent function spawnEncounter(
    contract: RER_Contract,
    species: CreatureType,
    position: Vector
  ): RandomEncountersReworkedHuntingGroundEntity {
    var bestiary_entry: RER_BestiaryEntry = this.manager.master.bestiary
      .getEntry(this.manager.master, species);

    var count: int = RoundF(
      (bestiary_entry.getSpawnCount(this.manager.master) as float)
      * contract.enemyCountMultiplier(RER_getContractDifficultyScaling())
    );

    var entities: array<CEntity> = bestiary_entry.spawn(
      this.manager.master,
      position,
      count, //count
      , // density
      EncounterType_CONTRACT,
      RER_BESF_NO_BESTIARY_FEATURE | RER_BESF_NO_PERSIST,
      'RandomEncountersReworked_ContractCreature',
      // a high number to make sure there is no composition as we'll spawn them
      // manually.
      10000,
      this.getDamageModifiers(contract)
    );

    var rer_entity_template: CEntityTemplate = LoadResourceAsync(
      "dlc\modtemplates\randomencounterreworkeddlc\data\rer_hunting_ground_entity.w2ent",
      true
    ) as CEntityTemplate;

    var rer_entity: RandomEncountersReworkedHuntingGroundEntity = theGame
      .CreateEntity(
        rer_entity_template,
        position,
        thePlayer.GetWorldRotation()
      ) as RandomEncountersReworkedHuntingGroundEntity;

    rer_entity.manual_destruction = true;
    rer_entity.startEncounter(this.manager.master, entities, bestiary_entry);

    return rer_entity;
  }

  private function getDamageModifiers(contract: RER_Contract): SU_BaseDamageModifier {
    var scaling: RER_ContractScaling = RER_getContractDifficultyScaling();
    var damage_modifier: SU_BaseDamageModifier = new SU_BaseDamageModifier in this.manager;
    damage_modifier.damage_received_modifier = contract.damageReceivedModifier(scaling);
    damage_modifier.damage_dealt_modifier = contract.damageDealtModifier(scaling);

    NLOG("contract, getDamageModifiers, damage_received_modifier =" + damage_modifier.damage_received_modifier);
    NLOG("contract, getDamageModifiers, damage_dealt_modifier =" + damage_modifier.damage_dealt_modifier);

    return damage_modifier;
  }

  public latent function cleanupEncounter() {
    if (!this.isSpawned()) {
      return;
    }

    this.encounter.clean();
  }
}
