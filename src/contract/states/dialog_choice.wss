
/**
 * In this state we display a list of dialogue options to the player so that
 * he can pick the contract he likes.
 */
state DialogChoice in RER_ContractManager {
  var camera: SU_StaticCamera;
  var completed: bool;

  event OnEnterState(previous_state_name: name) {
    super.OnEnterState(previous_state_name);
    NLOG("RER_ContractManager - state DialogChoice");

    this.DialogChoice_main();
  }

  private var menu_distance_value: float;

  entry function DialogChoice_main() {
    this.completed = false;
    this.startNoticeboardCutscene();

    while (!this.completed) {
      this.DialogChoice_prepareAndDisplayDialogChoices();
    }
  }

  private latent function startNoticeboardCutscene() {
    var noticeboard: W3NoticeBoard;

    RER_tutorialTryShowNoticeboard();

    REROL_mhm();
    Sleep(0.1);

    this.camera = SU_getStaticCamera();
    noticeboard = parent.getNearbyNoticeboard();
    
    this.camera.teleportAndLookAt(
      noticeboard.GetWorldPosition() + VecFromHeading(noticeboard.GetHeading()) * 2 + Vector(0, 0, 1.5),
      noticeboard.GetWorldPosition() + Vector(0, 0, 1.5)
    );

    theGame.FadeOut(0.2);
    this.camera.start();
    theGame.FadeInAsync(0.4);
  }

  private latent function DialogChoice_prepareAndDisplayDialogChoices() {
    var contracts_count: int = parent.getMaximumContractCount();

    var noticeboard: W3NoticeBoard = parent.getNearbyNoticeboard();
    var difficulty: int = parent.getSelectedDifficulty();
    var contracts: array<RER_Contract>;

    var i: int;
    for (i = contracts_count; i > 0; i -= 1) {
      var factory: RER_ContractSeedFactory = RER_ContractSeedFactory(
        noticeboard.GetWorldPosition(),
        difficulty,
        i,
        SUH_getCurrentRegion()
      );

      var contract: RER_Contract = new RER_Contract in parent;
      contract.init(factory);

      contracts.PushBack(contract);
    }

    var choices: array<SSceneChoice>;

    choices.PushBack(SSceneChoice(
      StrReplace(
        GetLocStringByKey("rer_select_difficulty"),
        "{{difficulty}}",
        difficulty
      ),
      false,
      true,
      false,
      DialogAction_EXIT,
      'SelectDifficulty'
    ));

    var i: int;
    for (i = 0; i < contracts.Size(); i += 1) {
      var contract: RER_Contract = contracts[i];
      var species_list: array<CreatureType> = contract.speciesList();
      // the addition of the index here helps us differentiate the contracts
      // after the player has selected them, so we can do a strcmp and be sure
      // it's the one we want.
      var line: string = "[" + contract.difficulty() + "-" + (i + 1) + "] ";
      var require_comma: bool = false;

      for species: CreatureType in species_list {
        if (require_comma) {
          line += ", ";
        }
        require_comma = true;

        line += upperCaseFirstLetter(
          getCreatureNameFromCreatureType(
            parent.master.bestiary, species
          )
        );
      }

      choices.PushBack(SSceneChoice(
        upperCaseFirstLetter(line),
        false,
        false, // already choosen
        false,
        DialogAction_MONSTERCONTRACT,
        'StartContract'
      ));
    }

    choices.PushBack(SSceneChoice(
      GetLocStringByKey("rer_cancel"),
      false,
      true,
      false,
      DialogAction_EXIT,
      'Cancel'
    ));

    this.DialogChoice_displayDialogChoices(choices, contracts);
  }

  private latent function DialogChoice_displayDialogChoices(
    choices: array<SSceneChoice>,
    contracts: array<RER_Contract>
  ) {
    // while on gamepad, the interact input is directly sent in the dialog choice
    // it is safer to wait a bit before capturing the input.
    Sleep(0.25);

    var response: SSceneChoice = SU_setDialogChoicesAndWaitForResponse(choices);
    SU_closeDialogChoiceInterface();

    if (!IsNameValid(response.playGoChunk) || response.playGoChunk == 'Cancel') {
      this.camera.Stop();
      Sleep(0.25);
      parent.GotoState('Waiting');
      return;
    }

    if (response.playGoChunk == 'SelectDifficulty') {
      var haggle: RER_ContractModuleDialog = new RER_ContractModuleDialog in this;
      haggle.openDifficultySelectorWindow(parent);

      return;
    }

    var reputation_system_enabled: bool = theGame.GetInGameConfigWrapper()
      .GetVarValue('RERcontracts', 'RERcontractsReputationSystemEnabled');

    var offset: int = 1 + (reputation_system_enabled as int);

    var i: int;
    for (i = 0; i < choices.Size(); i += 1) {
      if (StrContains(response.description, choices[i].description)) {
        var selected_contract: RER_Contract = contracts[i];

        if (selected_contract) {
          this.completed = true;
          theSound.SoundEvent("gui_ingame_quest_active");
          this.camera.Stop();

          this.displayBookForContract(selected_contract, parent.master.bestiary);

          parent.startContract(selected_contract);          
          return;
        }
      }
    }

    NDEBUG("RER ERROR: Unable to get creature_type from dialogue choices");
  }

  private function displayBookForContract(contract: RER_Contract, bestiary: RER_Bestiary) {
    var species_list: array<CreatureType>;

    var message: string = "Main targets:<br/>";
    species_list = contract.speciesList();
    for species: CreatureType in species_list {
      message += " - " + getCreatureNameFromCreatureType(
        bestiary,
        species
      ) + "<br/>";
    }

    message += "<br/><br/>";
    message += "Secondary targets:";
    message += "<br/>";
    species_list = contract.secondarySpeciesList();
    for species: CreatureType in species_list {
      message += "   - " + getCreatureNameFromCreatureType(
        bestiary,
        species
      ) + "<br/>";
    }

    species_list = contract.opportunisticSpeciesList();
    if (species_list.Size() > 0) {
      message += "<br/><br/>";
      message += "Opportunistic species from the region:";
      message += "<br/>";
      for species: CreatureType in species_list {
        message += "   - " + getCreatureNameFromCreatureType(
          bestiary,
          species
        ) + "<br/>";
      }
    }

    RER_openPopup(GetLocStringByKey('rer_contract'), message);
  }
}